{
  "docs": [
    {
      "id": "b658d5ed-817b-44f3-9443-839161b38ad3",
      "doc_id": "b658d5ed-817b-44f3-9443-839161b38ad3",
      "updated": 1693159860000,
      "properties": {
        "date": "2023-08-13",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2308-w2",
        "tags": [],
        "summary": "周末和亲戚朋友们去了峨眉的七里坪禅道，也许正是成都最热的时候，普通的周末也有很多人，不过和亲近的人一起游玩下还是很愉悦的。这里离峨眉索道不远，不过知道的人应该还不多，想避开攀登峨眉的大部队在附近登山打卡一下的话可以在这里试试。",
        "title": "数字溪流2308-W2",
        "status": "Published",
        "urlname": "b658d5ed-817b-44f3-9443-839161b38ad3",
        "updated": "2023-08-28 02:11:00"
      },
      "catalog": [
        {
          "title": "2023-08-13",
          "doc_id": "b658d5ed-817b-44f3-9443-839161b38ad3"
        }
      ],
      "realName": "数字溪流2308-W2",
      "relativePath": "/2023-08-13/数字溪流2308-W2.md"
    },
    {
      "id": "a239adaa-a272-4a0f-ab61-7fad7e79f0e5",
      "doc_id": "a239adaa-a272-4a0f-ab61-7fad7e79f0e5",
      "updated": 1690733760000,
      "properties": {
        "date": "2023-07-30",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2307-w5",
        "tags": [],
        "summary": "拍摄于塔子山公园的鸟语林，原来塔子山公园上还隐藏着这么一个小小的鸟类主题动物园，之前逛过几次都没发现，还是在大众点评上看到才无意发现。这只海鸥呆呆的眼神立马让我想起了去码头整点薯条这个梗，真是很适合这呆头呆脑的形象，哈哈。动物园里除了鹦鹉，海鸥，天鹅这些常见的鸟类也有羊驼，梅花鹿，绵羊甚至猪，妥妥的大杂烩。",
        "title": "数字溪流2307-W5",
        "status": "Published",
        "urlname": "a239adaa-a272-4a0f-ab61-7fad7e79f0e5",
        "updated": "2023-07-31 00:16:00"
      },
      "catalog": [
        {
          "title": "2023-07-30",
          "doc_id": "a239adaa-a272-4a0f-ab61-7fad7e79f0e5"
        }
      ],
      "realName": "数字溪流2307-W5",
      "relativePath": "/2023-07-30/数字溪流2307-W5.md"
    },
    {
      "id": "396270c6-a77e-4a97-992e-e273e0a24892",
      "doc_id": "396270c6-a77e-4a97-992e-e273e0a24892",
      "updated": 1696759140000,
      "properties": {
        "date": "2023-08-11",
        "type": "Post",
        "category": "博客记录",
        "slug": "migrate-blog-to-notionnext-from-hugo",
        "tags": [
          "NotionNext",
          "hugo",
          "notion",
          "blog"
        ],
        "summary": "曾经在 一周随笔20230226 这篇博文中描述了下我心目中理想的 Blog 系统，吐槽了下写博文时的一些很不爽的地方，也一直在寻找更好的 Blog 系统。直到无意间发现了 NotionNext，一下就有了哎哟不错喔，这应该就是我想要的博客系统这种感觉。甚至马上就想开始动手迁移我的博客，没有当初从 Hexo 迁移到 Hugo 的时那种纠结。",
        "title": "从 Hugo 迁移到 NotionNext",
        "status": "Published",
        "urlname": "396270c6-a77e-4a97-992e-e273e0a24892",
        "updated": "2023-10-08 17:59:00"
      },
      "catalog": [
        {
          "title": "2023-08-11",
          "doc_id": "396270c6-a77e-4a97-992e-e273e0a24892"
        }
      ],
      "realName": "从 Hugo 迁移到 NotionNext",
      "relativePath": "/2023-08-11/从 Hugo 迁移到 NotionNext.md"
    },
    {
      "id": "0178db9b-0fd8-41ed-b27d-0015ae286e79",
      "doc_id": "0178db9b-0fd8-41ed-b27d-0015ae286e79",
      "updated": 1690298040000,
      "properties": {
        "date": "2023-07-23",
        "type": "Post",
        "category": "软件工具",
        "slug": "use-keel-auto-update-image-version-in-k8s",
        "tags": [
          "kubernetes",
          "Keel"
        ],
        "summary": "当我们在自己的服务器上使用 Docker 部署了一些有用的容器镜像时，一般可以使用 watchtower 来自动更新我们的镜像版本。但是如果使用的是 K8S，有没有工具可以像 watchtower 一样来自动更新 K8S 中的容器镜像版本呢，最近发现了 Keel 这款工具可以做同样的事。",
        "title": "使用 Keel 自动更新 K8S 中容器镜像",
        "status": "Published",
        "urlname": "0178db9b-0fd8-41ed-b27d-0015ae286e79",
        "updated": "2023-07-25 23:14:00"
      },
      "catalog": [
        {
          "title": "2023-07-23",
          "doc_id": "0178db9b-0fd8-41ed-b27d-0015ae286e79"
        }
      ],
      "realName": "使用 Keel 自动更新 K8S 中容器镜像",
      "relativePath": "/2023-07-23/使用 Keel 自动更新 K8S 中容器镜像.md"
    },
    {
      "id": "5b1cf9e5-6248-4bb5-bd04-87cf89e4c868",
      "doc_id": "5b1cf9e5-6248-4bb5-bd04-87cf89e4c868",
      "updated": 1689935760000,
      "properties": {
        "date": "2021-12-08",
        "type": "Post",
        "category": "Golang",
        "slug": "golang-gc-theory",
        "tags": [
          "Golang GC"
        ],
        "summary": "Go 1.5 以后（截止Golang v1.12）采用了非分代、非紧缩、写屏障、三色标记的原理进行垃圾回收。",
        "title": "Golang GC 原理",
        "status": "Published",
        "urlname": "5b1cf9e5-6248-4bb5-bd04-87cf89e4c868",
        "updated": "2023-07-21 18:36:00"
      },
      "catalog": [
        {
          "title": "2021-12-08",
          "doc_id": "5b1cf9e5-6248-4bb5-bd04-87cf89e4c868"
        }
      ],
      "realName": "Golang GC 原理",
      "relativePath": "/2021-12-08/Golang GC 原理.md"
    },
    {
      "id": "d749a6fa-bee2-4c5a-a28d-33ba1c9e9d46",
      "doc_id": "d749a6fa-bee2-4c5a-a28d-33ba1c9e9d46",
      "updated": 1689577920000,
      "properties": {
        "date": "2016-10-20",
        "type": "Post",
        "category": "Linux管理",
        "slug": "vi-skills",
        "tags": [],
        "title": "Vi使用技巧",
        "status": "Published",
        "urlname": "d749a6fa-bee2-4c5a-a28d-33ba1c9e9d46",
        "updated": "2023-07-17 15:12:00"
      },
      "catalog": [
        {
          "title": "2016-10-20",
          "doc_id": "d749a6fa-bee2-4c5a-a28d-33ba1c9e9d46"
        }
      ],
      "realName": "Vi使用技巧",
      "relativePath": "/2016-10-20/Vi使用技巧.md"
    },
    {
      "id": "0bd4d76f-8ce3-4f7a-9795-ec84b0b7b8ee",
      "doc_id": "0bd4d76f-8ce3-4f7a-9795-ec84b0b7b8ee",
      "updated": 1689577980000,
      "properties": {
        "date": "2016-11-02",
        "type": "Post",
        "category": "Linux编程",
        "slug": "linux-driven-development-basic-knowledge",
        "tags": [],
        "title": "Linux驱动开发基础知识",
        "status": "Published",
        "urlname": "0bd4d76f-8ce3-4f7a-9795-ec84b0b7b8ee",
        "updated": "2023-07-17 15:13:00"
      },
      "catalog": [
        {
          "title": "2016-11-02",
          "doc_id": "0bd4d76f-8ce3-4f7a-9795-ec84b0b7b8ee"
        }
      ],
      "realName": "Linux驱动开发基础知识",
      "relativePath": "/2016-11-02/Linux驱动开发基础知识.md"
    },
    {
      "id": "11f072de-5ee2-401b-946c-59daf3f6a1ad",
      "doc_id": "11f072de-5ee2-401b-946c-59daf3f6a1ad",
      "updated": 1689577920000,
      "properties": {
        "date": "2016-11-08",
        "type": "Post",
        "category": "Python",
        "slug": "py2exe-conversion-parameters",
        "tags": [],
        "title": "py2exe转换参数",
        "status": "Published",
        "urlname": "11f072de-5ee2-401b-946c-59daf3f6a1ad",
        "updated": "2023-07-17 15:12:00"
      },
      "catalog": [
        {
          "title": "2016-11-08",
          "doc_id": "11f072de-5ee2-401b-946c-59daf3f6a1ad"
        }
      ],
      "realName": "py2exe转换参数",
      "relativePath": "/2016-11-08/py2exe转换参数.md"
    },
    {
      "id": "f772582b-f800-4295-b10e-8f87ffa32d63",
      "doc_id": "f772582b-f800-4295-b10e-8f87ffa32d63",
      "updated": 1689577920000,
      "properties": {
        "date": "2016-12-10",
        "type": "Post",
        "category": "Linux编程",
        "slug": "makefile-common-knowledge-points",
        "tags": [],
        "title": "Makefile常用知识点",
        "status": "Published",
        "urlname": "f772582b-f800-4295-b10e-8f87ffa32d63",
        "updated": "2023-07-17 15:12:00"
      },
      "catalog": [
        {
          "title": "2016-12-10",
          "doc_id": "f772582b-f800-4295-b10e-8f87ffa32d63"
        }
      ],
      "realName": "Makefile常用知识点",
      "relativePath": "/2016-12-10/Makefile常用知识点.md"
    },
    {
      "id": "351382cf-57e4-4fd1-a59b-2e95dc07fd20",
      "doc_id": "351382cf-57e4-4fd1-a59b-2e95dc07fd20",
      "updated": 1689577860000,
      "properties": {
        "date": "2016-12-10",
        "type": "Post",
        "category": "Python",
        "slug": "python-tarfile-module-unzip-invalid-mode-('wb')-or-filename",
        "tags": [],
        "title": "Python tarfile模块解压报错 invalid mode ('wb') or filename",
        "status": "Published",
        "urlname": "351382cf-57e4-4fd1-a59b-2e95dc07fd20",
        "updated": "2023-07-17 15:11:00"
      },
      "catalog": [
        {
          "title": "2016-12-10",
          "doc_id": "351382cf-57e4-4fd1-a59b-2e95dc07fd20"
        }
      ],
      "realName": "Python tarfile模块解压报错 invalid mode ('wb') or filename",
      "relativePath": "/2016-12-10/Python tarfile模块解压报错 invalid mode ('wb') or filename.md"
    },
    {
      "id": "276c3766-5a22-4f6f-8316-f8de676c3a3d",
      "doc_id": "276c3766-5a22-4f6f-8316-f8de676c3a3d",
      "updated": 1689577860000,
      "properties": {
        "date": "2016-12-10",
        "type": "Post",
        "category": "Python",
        "slug": "python-small-knowledge-point",
        "tags": [],
        "title": "python小知识点",
        "status": "Published",
        "urlname": "276c3766-5a22-4f6f-8316-f8de676c3a3d",
        "updated": "2023-07-17 15:11:00"
      },
      "catalog": [
        {
          "title": "2016-12-10",
          "doc_id": "276c3766-5a22-4f6f-8316-f8de676c3a3d"
        }
      ],
      "realName": "python小知识点",
      "relativePath": "/2016-12-10/python小知识点.md"
    },
    {
      "id": "d6248408-342d-49c8-815f-69ff4076bb79",
      "doc_id": "d6248408-342d-49c8-815f-69ff4076bb79",
      "updated": 1689577800000,
      "properties": {
        "date": "2016-12-16",
        "type": "Post",
        "category": "Android",
        "slug": "android-activity-lifecycle",
        "tags": [],
        "title": "Android活动生命周期",
        "status": "Published",
        "urlname": "d6248408-342d-49c8-815f-69ff4076bb79",
        "updated": "2023-07-17 15:10:00"
      },
      "catalog": [
        {
          "title": "2016-12-16",
          "doc_id": "d6248408-342d-49c8-815f-69ff4076bb79"
        }
      ],
      "realName": "Android活动生命周期",
      "relativePath": "/2016-12-16/Android活动生命周期.md"
    },
    {
      "id": "4fe27424-e1b9-4e3a-a456-3d9ce383e8b4",
      "doc_id": "4fe27424-e1b9-4e3a-a456-3d9ce383e8b4",
      "updated": 1689577800000,
      "properties": {
        "date": "2017-01-22",
        "type": "Post",
        "category": "数据库",
        "slug": "mysql-will-surely-know-notes",
        "tags": [],
        "title": "MySQL必知必会笔记",
        "status": "Published",
        "urlname": "4fe27424-e1b9-4e3a-a456-3d9ce383e8b4",
        "updated": "2023-07-17 15:10:00"
      },
      "catalog": [
        {
          "title": "2017-01-22",
          "doc_id": "4fe27424-e1b9-4e3a-a456-3d9ce383e8b4"
        }
      ],
      "realName": "MySQL必知必会笔记",
      "relativePath": "/2017-01-22/MySQL必知必会笔记.md"
    },
    {
      "id": "85d0963c-d167-457f-9e97-19e6477c6d4e",
      "doc_id": "85d0963c-d167-457f-9e97-19e6477c6d4e",
      "updated": 1689577800000,
      "properties": {
        "date": "2017-03-12",
        "type": "Post",
        "category": "Linux管理",
        "slug": "summary-of-shell-writing",
        "tags": [],
        "title": "shell编写总结",
        "status": "Published",
        "urlname": "85d0963c-d167-457f-9e97-19e6477c6d4e",
        "updated": "2023-07-17 15:10:00"
      },
      "catalog": [
        {
          "title": "2017-03-12",
          "doc_id": "85d0963c-d167-457f-9e97-19e6477c6d4e"
        }
      ],
      "realName": "shell编写总结",
      "relativePath": "/2017-03-12/shell编写总结.md"
    },
    {
      "id": "047e10f5-4d9d-4b27-8eb9-8ad26242f40b",
      "doc_id": "047e10f5-4d9d-4b27-8eb9-8ad26242f40b",
      "updated": 1689577800000,
      "properties": {
        "date": "2017-04-09",
        "type": "Post",
        "category": "Django",
        "slug": "design-pattern-of-django",
        "tags": [],
        "title": "Django的设计模式",
        "status": "Published",
        "urlname": "047e10f5-4d9d-4b27-8eb9-8ad26242f40b",
        "updated": "2023-07-17 15:10:00"
      },
      "catalog": [
        {
          "title": "2017-04-09",
          "doc_id": "047e10f5-4d9d-4b27-8eb9-8ad26242f40b"
        }
      ],
      "realName": "Django的设计模式",
      "relativePath": "/2017-04-09/Django的设计模式.md"
    },
    {
      "id": "7ef338f3-3c3b-4254-9a9b-888ed9d87f4b",
      "doc_id": "7ef338f3-3c3b-4254-9a9b-888ed9d87f4b",
      "updated": 1689577740000,
      "properties": {
        "date": "2017-04-09",
        "type": "Post",
        "category": "Django",
        "slug": "django-modelform-modifies-the-default-control-properties",
        "tags": [],
        "title": "Django ModelForm修改默认的控件属性",
        "status": "Published",
        "urlname": "7ef338f3-3c3b-4254-9a9b-888ed9d87f4b",
        "updated": "2023-07-17 15:09:00"
      },
      "catalog": [
        {
          "title": "2017-04-09",
          "doc_id": "7ef338f3-3c3b-4254-9a9b-888ed9d87f4b"
        }
      ],
      "realName": "Django ModelForm修改默认的控件属性",
      "relativePath": "/2017-04-09/Django ModelForm修改默认的控件属性.md"
    },
    {
      "id": "4531936b-6f90-48a8-8d44-c663f3a660cd",
      "doc_id": "4531936b-6f90-48a8-8d44-c663f3a660cd",
      "updated": 1689577740000,
      "properties": {
        "date": "2017-04-20",
        "type": "Post",
        "category": "Linux管理",
        "slug": "the-configuration-program-becomes-a-linux-service",
        "tags": [],
        "title": "配置程序成为Linux服务",
        "status": "Published",
        "urlname": "4531936b-6f90-48a8-8d44-c663f3a660cd",
        "updated": "2023-07-17 15:09:00"
      },
      "catalog": [
        {
          "title": "2017-04-20",
          "doc_id": "4531936b-6f90-48a8-8d44-c663f3a660cd"
        }
      ],
      "realName": "配置程序成为Linux服务",
      "relativePath": "/2017-04-20/配置程序成为Linux服务.md"
    },
    {
      "id": "3703f624-8045-4b58-9dda-216f30a79bcc",
      "doc_id": "3703f624-8045-4b58-9dda-216f30a79bcc",
      "updated": 1689577680000,
      "properties": {
        "date": "2017-04-27",
        "type": "Post",
        "category": "设计模式",
        "slug": "brief-explanation-of-event-driven-(python-implementation)",
        "tags": [],
        "title": "事件驱动的简明讲解(python实现)",
        "status": "Published",
        "urlname": "3703f624-8045-4b58-9dda-216f30a79bcc",
        "updated": "2023-07-17 15:08:00"
      },
      "catalog": [
        {
          "title": "2017-04-27",
          "doc_id": "3703f624-8045-4b58-9dda-216f30a79bcc"
        }
      ],
      "realName": "事件驱动的简明讲解(python实现)",
      "relativePath": "/2017-04-27/事件驱动的简明讲解(python实现).md"
    },
    {
      "id": "acdd1a45-2613-49f0-a576-7b6875fe99f8",
      "doc_id": "acdd1a45-2613-49f0-a576-7b6875fe99f8",
      "updated": 1689577680000,
      "properties": {
        "date": "2017-05-06",
        "type": "Post",
        "category": "Python",
        "slug": "python-advanced-iterator-and-generator",
        "tags": [],
        "title": "Python进阶之迭代器和生成器",
        "status": "Published",
        "urlname": "acdd1a45-2613-49f0-a576-7b6875fe99f8",
        "updated": "2023-07-17 15:08:00"
      },
      "catalog": [
        {
          "title": "2017-05-06",
          "doc_id": "acdd1a45-2613-49f0-a576-7b6875fe99f8"
        }
      ],
      "realName": "Python进阶之迭代器和生成器",
      "relativePath": "/2017-05-06/Python进阶之迭代器和生成器.md"
    },
    {
      "id": "c4d4129f-e286-4dbd-a7af-8e824ae2924e",
      "doc_id": "c4d4129f-e286-4dbd-a7af-8e824ae2924e",
      "updated": 1689577620000,
      "properties": {
        "date": "2017-05-10",
        "type": "Post",
        "category": "Python",
        "slug": "python-advanced-decorator",
        "tags": [],
        "title": "Python进阶之装饰器",
        "status": "Published",
        "urlname": "c4d4129f-e286-4dbd-a7af-8e824ae2924e",
        "updated": "2023-07-17 15:07:00"
      },
      "catalog": [
        {
          "title": "2017-05-10",
          "doc_id": "c4d4129f-e286-4dbd-a7af-8e824ae2924e"
        }
      ],
      "realName": "Python进阶之装饰器",
      "relativePath": "/2017-05-10/Python进阶之装饰器.md"
    },
    {
      "id": "3cc8b889-069f-4f1c-bbe2-81f03a7ca882",
      "doc_id": "3cc8b889-069f-4f1c-bbe2-81f03a7ca882",
      "updated": 1689577560000,
      "properties": {
        "date": "2017-05-20",
        "type": "Post",
        "category": "Python",
        "slug": "collections-of-the-python-module",
        "tags": [],
        "title": "Python模块之Collections",
        "status": "Published",
        "urlname": "3cc8b889-069f-4f1c-bbe2-81f03a7ca882",
        "updated": "2023-07-17 15:06:00"
      },
      "catalog": [
        {
          "title": "2017-05-20",
          "doc_id": "3cc8b889-069f-4f1c-bbe2-81f03a7ca882"
        }
      ],
      "realName": "Python模块之Collections",
      "relativePath": "/2017-05-20/Python模块之Collections.md"
    },
    {
      "id": "adf520da-d2ef-41b2-aa0a-de9c13c87721",
      "doc_id": "adf520da-d2ef-41b2-aa0a-de9c13c87721",
      "updated": 1689577440000,
      "properties": {
        "date": "2017-06-02",
        "type": "Post",
        "category": "JavaScript",
        "slug": "javascript-type-comparison",
        "tags": [],
        "title": "JavaScript类型比较",
        "status": "Published",
        "urlname": "adf520da-d2ef-41b2-aa0a-de9c13c87721",
        "updated": "2023-07-17 15:04:00"
      },
      "catalog": [
        {
          "title": "2017-06-02",
          "doc_id": "adf520da-d2ef-41b2-aa0a-de9c13c87721"
        }
      ],
      "realName": "JavaScript类型比较",
      "relativePath": "/2017-06-02/JavaScript类型比较.md"
    },
    {
      "id": "8810277f-eb6e-41cc-9ff1-022d45838b09",
      "doc_id": "8810277f-eb6e-41cc-9ff1-022d45838b09",
      "updated": 1689577380000,
      "properties": {
        "date": "2017-06-24",
        "type": "Post",
        "category": "JavaScript",
        "slug": "the-basic-concept-of-javascript-closure",
        "tags": [],
        "title": "JavaScript闭包基本概念",
        "status": "Published",
        "urlname": "8810277f-eb6e-41cc-9ff1-022d45838b09",
        "updated": "2023-07-17 15:03:00"
      },
      "catalog": [
        {
          "title": "2017-06-24",
          "doc_id": "8810277f-eb6e-41cc-9ff1-022d45838b09"
        }
      ],
      "realName": "JavaScript闭包基本概念",
      "relativePath": "/2017-06-24/JavaScript闭包基本概念.md"
    },
    {
      "id": "206a23f7-dc7b-42cb-bff8-fe5cae67b860",
      "doc_id": "206a23f7-dc7b-42cb-bff8-fe5cae67b860",
      "updated": 1689577260000,
      "properties": {
        "date": "2017-06-24",
        "type": "Post",
        "category": "JavaScript",
        "slug": "javascript-function",
        "tags": [],
        "title": "JavaScript 函数",
        "status": "Published",
        "urlname": "206a23f7-dc7b-42cb-bff8-fe5cae67b860",
        "updated": "2023-07-17 15:01:00"
      },
      "catalog": [
        {
          "title": "2017-06-24",
          "doc_id": "206a23f7-dc7b-42cb-bff8-fe5cae67b860"
        }
      ],
      "realName": "JavaScript 函数",
      "relativePath": "/2017-06-24/JavaScript 函数.md"
    },
    {
      "id": "a829aa8b-4b63-4436-ad5c-d3d5b121b896",
      "doc_id": "a829aa8b-4b63-4436-ad5c-d3d5b121b896",
      "updated": 1689576480000,
      "properties": {
        "date": "2017-06-24",
        "type": "Post",
        "category": "Java",
        "slug": "java-io-learning-point-guide",
        "tags": [],
        "title": "Java IO学习要点导图",
        "status": "Published",
        "urlname": "a829aa8b-4b63-4436-ad5c-d3d5b121b896",
        "updated": "2023-07-17 14:48:00"
      },
      "catalog": [
        {
          "title": "2017-06-24",
          "doc_id": "a829aa8b-4b63-4436-ad5c-d3d5b121b896"
        }
      ],
      "realName": "Java IO学习要点导图",
      "relativePath": "/2017-06-24/Java IO学习要点导图.md"
    },
    {
      "id": "78e26026-8b45-4f5a-8cbf-9426d45f4224",
      "doc_id": "78e26026-8b45-4f5a-8cbf-9426d45f4224",
      "updated": 1689576420000,
      "properties": {
        "date": "2017-06-24",
        "type": "Post",
        "category": "Java",
        "slug": "the-class-object-of-the-thinking-mapping-java",
        "tags": [],
        "title": "思维导图学Java之Class对象",
        "status": "Published",
        "urlname": "78e26026-8b45-4f5a-8cbf-9426d45f4224",
        "updated": "2023-07-17 14:47:00"
      },
      "catalog": [
        {
          "title": "2017-06-24",
          "doc_id": "78e26026-8b45-4f5a-8cbf-9426d45f4224"
        }
      ],
      "realName": "思维导图学Java之Class对象",
      "relativePath": "/2017-06-24/思维导图学Java之Class对象.md"
    },
    {
      "id": "f591f5a7-df0d-4077-a51e-615be25c7d01",
      "doc_id": "f591f5a7-df0d-4077-a51e-615be25c7d01",
      "updated": 1689576420000,
      "properties": {
        "date": "2017-07-12",
        "type": "Post",
        "category": "JavaScript",
        "slug": "es6-scope-and-deconstruction-assignment",
        "tags": [],
        "title": "ES6作用域和解构赋值",
        "status": "Published",
        "urlname": "f591f5a7-df0d-4077-a51e-615be25c7d01",
        "updated": "2023-07-17 14:47:00"
      },
      "catalog": [
        {
          "title": "2017-07-12",
          "doc_id": "f591f5a7-df0d-4077-a51e-615be25c7d01"
        }
      ],
      "realName": "ES6作用域和解构赋值",
      "relativePath": "/2017-07-12/ES6作用域和解构赋值.md"
    },
    {
      "id": "90c1b6ff-c63d-47e6-aa1d-38f0b8ae3356",
      "doc_id": "90c1b6ff-c63d-47e6-aa1d-38f0b8ae3356",
      "updated": 1689576300000,
      "properties": {
        "date": "2017-09-24",
        "type": "Post",
        "category": "设计模式",
        "slug": "notes-on-the-design-pattern-of-big-talk",
        "tags": [],
        "title": "大话设计模式 笔记",
        "status": "Published",
        "urlname": "90c1b6ff-c63d-47e6-aa1d-38f0b8ae3356",
        "updated": "2023-07-17 14:45:00"
      },
      "catalog": [
        {
          "title": "2017-09-24",
          "doc_id": "90c1b6ff-c63d-47e6-aa1d-38f0b8ae3356"
        }
      ],
      "realName": "大话设计模式 笔记",
      "relativePath": "/2017-09-24/大话设计模式 笔记.md"
    },
    {
      "id": "b8f82bfa-8109-409c-bb6a-ad69dd5e25cd",
      "doc_id": "b8f82bfa-8109-409c-bb6a-ad69dd5e25cd",
      "updated": 1689576300000,
      "properties": {
        "date": "2017-09-25",
        "type": "Post",
        "category": "cpp",
        "slug": "cpp11-new-knowledge-point",
        "tags": [],
        "title": "C++11 新知识点",
        "status": "Published",
        "urlname": "b8f82bfa-8109-409c-bb6a-ad69dd5e25cd",
        "updated": "2023-07-17 14:45:00"
      },
      "catalog": [
        {
          "title": "2017-09-25",
          "doc_id": "b8f82bfa-8109-409c-bb6a-ad69dd5e25cd"
        }
      ],
      "realName": "C++11 新知识点",
      "relativePath": "/2017-09-25/C++11 新知识点.md"
    },
    {
      "id": "39808486-176b-44d2-9277-48a36682cc92",
      "doc_id": "39808486-176b-44d2-9277-48a36682cc92",
      "updated": 1689576180000,
      "properties": {
        "date": "2017-12-29",
        "type": "Post",
        "category": "Linux管理",
        "slug": "shell-edit-the-crontab-task",
        "tags": [],
        "title": "shell编辑crontab任务",
        "status": "Published",
        "urlname": "39808486-176b-44d2-9277-48a36682cc92",
        "updated": "2023-07-17 14:43:00"
      },
      "catalog": [
        {
          "title": "2017-12-29",
          "doc_id": "39808486-176b-44d2-9277-48a36682cc92"
        }
      ],
      "realName": "shell编辑crontab任务",
      "relativePath": "/2017-12-29/shell编辑crontab任务.md"
    },
    {
      "id": "9b07d1c7-14d8-4348-a464-07e07e50bb64",
      "doc_id": "9b07d1c7-14d8-4348-a464-07e07e50bb64",
      "updated": 1689577980000,
      "properties": {
        "date": "2017-12-29",
        "type": "Post",
        "category": "Linux管理",
        "slug": "linux-common-commands",
        "tags": [
          "Linux命令"
        ],
        "title": "Linux常用命令",
        "status": "Published",
        "urlname": "9b07d1c7-14d8-4348-a464-07e07e50bb64",
        "updated": "2023-07-17 15:13:00"
      },
      "catalog": [
        {
          "title": "2017-12-29",
          "doc_id": "9b07d1c7-14d8-4348-a464-07e07e50bb64"
        }
      ],
      "realName": "Linux常用命令",
      "relativePath": "/2017-12-29/Linux常用命令.md"
    },
    {
      "id": "961c038c-8f49-478d-8c61-68f679680da0",
      "doc_id": "961c038c-8f49-478d-8c61-68f679680da0",
      "updated": 1689576120000,
      "properties": {
        "date": "2018-01-04",
        "type": "Post",
        "category": "Python",
        "slug": "virtualenvwrapper-of-the-python-module",
        "tags": [],
        "title": "Python模块之virtualenvwrapper",
        "status": "Published",
        "urlname": "961c038c-8f49-478d-8c61-68f679680da0",
        "updated": "2023-07-17 14:42:00"
      },
      "catalog": [
        {
          "title": "2018-01-04",
          "doc_id": "961c038c-8f49-478d-8c61-68f679680da0"
        }
      ],
      "realName": "Python模块之virtualenvwrapper",
      "relativePath": "/2018-01-04/Python模块之virtualenvwrapper.md"
    },
    {
      "id": "fe690171-3af8-4967-993b-825f5a1cd525",
      "doc_id": "fe690171-3af8-4967-993b-825f5a1cd525",
      "updated": 1689576120000,
      "properties": {
        "date": "2018-01-23",
        "type": "Post",
        "category": "Django",
        "slug": "django-hides-the-primary-key-id-in-the-database-with-hash",
        "tags": [],
        "title": "Django 用散列隐藏数据库中主键ID",
        "status": "Published",
        "urlname": "fe690171-3af8-4967-993b-825f5a1cd525",
        "updated": "2023-07-17 14:42:00"
      },
      "catalog": [
        {
          "title": "2018-01-23",
          "doc_id": "fe690171-3af8-4967-993b-825f5a1cd525"
        }
      ],
      "realName": "Django 用散列隐藏数据库中主键ID",
      "relativePath": "/2018-01-23/Django 用散列隐藏数据库中主键ID.md"
    },
    {
      "id": "3718ed3c-f70f-43ac-8eb2-51487ab5922c",
      "doc_id": "3718ed3c-f70f-43ac-8eb2-51487ab5922c",
      "updated": 1689576120000,
      "properties": {
        "date": "2018-03-17",
        "type": "Post",
        "category": "Docker",
        "slug": "running-crontab-in-docker",
        "tags": [],
        "title": "在Docker中运行crontab",
        "status": "Published",
        "urlname": "3718ed3c-f70f-43ac-8eb2-51487ab5922c",
        "updated": "2023-07-17 14:42:00"
      },
      "catalog": [
        {
          "title": "2018-03-17",
          "doc_id": "3718ed3c-f70f-43ac-8eb2-51487ab5922c"
        }
      ],
      "realName": "在Docker中运行crontab",
      "relativePath": "/2018-03-17/在Docker中运行crontab.md"
    },
    {
      "id": "f816711b-a712-4265-ade5-63fe1cc26c9f",
      "doc_id": "f816711b-a712-4265-ade5-63fe1cc26c9f",
      "updated": 1689576120000,
      "properties": {
        "date": "2018-04-05",
        "type": "Post",
        "category": "数据库",
        "slug": "mysql-config-adjust",
        "tags": [
          "MySQL配置"
        ],
        "title": "MySQL 配置优化",
        "status": "Published",
        "urlname": "f816711b-a712-4265-ade5-63fe1cc26c9f",
        "updated": "2023-07-17 14:42:00"
      },
      "catalog": [
        {
          "title": "2018-04-05",
          "doc_id": "f816711b-a712-4265-ade5-63fe1cc26c9f"
        }
      ],
      "realName": "MySQL 配置优化",
      "relativePath": "/2018-04-05/MySQL 配置优化.md"
    },
    {
      "id": "84c953d6-d1f7-40c0-b9b0-116ff39f2132",
      "doc_id": "84c953d6-d1f7-40c0-b9b0-116ff39f2132",
      "updated": 1689576060000,
      "properties": {
        "date": "2018-06-13",
        "type": "Post",
        "category": "Python",
        "slug": "numpy-basic-usage",
        "tags": [
          "Python模块包",
          "Numpy",
          "科学计算",
          "数据分析"
        ],
        "title": "NumPy 基础用法",
        "status": "Published",
        "urlname": "84c953d6-d1f7-40c0-b9b0-116ff39f2132",
        "updated": "2023-07-17 14:41:00"
      },
      "catalog": [
        {
          "title": "2018-06-13",
          "doc_id": "84c953d6-d1f7-40c0-b9b0-116ff39f2132"
        }
      ],
      "realName": "NumPy 基础用法",
      "relativePath": "/2018-06-13/NumPy 基础用法.md"
    },
    {
      "id": "3009bc34-4eb9-4513-a0a9-fba6db5329c9",
      "doc_id": "3009bc34-4eb9-4513-a0a9-fba6db5329c9",
      "updated": 1689576060000,
      "properties": {
        "date": "2018-07-24",
        "type": "Post",
        "category": "Python",
        "slug": "pandas-basic-usage",
        "tags": [
          "Python模块包",
          "Pandas",
          "科学计算",
          "数据分析"
        ],
        "title": "Pandas 基础用法",
        "status": "Published",
        "urlname": "3009bc34-4eb9-4513-a0a9-fba6db5329c9",
        "updated": "2023-07-17 14:41:00"
      },
      "catalog": [
        {
          "title": "2018-07-24",
          "doc_id": "3009bc34-4eb9-4513-a0a9-fba6db5329c9"
        }
      ],
      "realName": "Pandas 基础用法",
      "relativePath": "/2018-07-24/Pandas 基础用法.md"
    },
    {
      "id": "a9ab7bf6-f568-4e0a-8f97-639be1acacf5",
      "doc_id": "a9ab7bf6-f568-4e0a-8f97-639be1acacf5",
      "updated": 1689576060000,
      "properties": {
        "date": "2018-09-11",
        "type": "Post",
        "category": "数据库",
        "slug": "sometimes-useful-mysql-skill",
        "tags": [
          "MySQL技巧"
        ],
        "title": "偶尔用得上的MySQL操作",
        "status": "Published",
        "urlname": "a9ab7bf6-f568-4e0a-8f97-639be1acacf5",
        "updated": "2023-07-17 14:41:00"
      },
      "catalog": [
        {
          "title": "2018-09-11",
          "doc_id": "a9ab7bf6-f568-4e0a-8f97-639be1acacf5"
        }
      ],
      "realName": "偶尔用得上的MySQL操作",
      "relativePath": "/2018-09-11/偶尔用得上的MySQL操作.md"
    },
    {
      "id": "bbe13887-7af7-4399-ba5e-d1b08398fa9a",
      "doc_id": "bbe13887-7af7-4399-ba5e-d1b08398fa9a",
      "updated": 1689576060000,
      "properties": {
        "date": "2018-09-27",
        "type": "Post",
        "category": "Python",
        "slug": "python-build-in-function",
        "tags": [
          "Python基础知识"
        ],
        "title": "Python 内置方法",
        "status": "Published",
        "urlname": "bbe13887-7af7-4399-ba5e-d1b08398fa9a",
        "updated": "2023-07-17 14:41:00"
      },
      "catalog": [
        {
          "title": "2018-09-27",
          "doc_id": "bbe13887-7af7-4399-ba5e-d1b08398fa9a"
        }
      ],
      "realName": "Python 内置方法",
      "relativePath": "/2018-09-27/Python 内置方法.md"
    },
    {
      "id": "c0c57fa4-044c-4f50-8199-9f12724853ee",
      "doc_id": "c0c57fa4-044c-4f50-8199-9f12724853ee",
      "updated": 1689576000000,
      "properties": {
        "date": "2018-11-30",
        "type": "Post",
        "category": "算法",
        "slug": "algorithm-with-leetcode",
        "tags": [
          "Python",
          "Go",
          "leetcode"
        ],
        "summary": "leetcode 算法刷题记录和总结, 主要使用Python和Go来作答.",
        "title": "leetcode 算法刷题记录",
        "status": "Published",
        "urlname": "c0c57fa4-044c-4f50-8199-9f12724853ee",
        "updated": "2023-07-17 14:40:00"
      },
      "catalog": [
        {
          "title": "2018-11-30",
          "doc_id": "c0c57fa4-044c-4f50-8199-9f12724853ee"
        }
      ],
      "realName": "leetcode 算法刷题记录",
      "relativePath": "/2018-11-30/leetcode 算法刷题记录.md"
    },
    {
      "id": "8a90fccd-b953-4c11-b81f-ef8fc113aa17",
      "doc_id": "8a90fccd-b953-4c11-b81f-ef8fc113aa17",
      "updated": 1689575880000,
      "properties": {
        "date": "2019-01-31",
        "type": "Post",
        "category": "Golang",
        "slug": "go-base-knowledge",
        "tags": [
          "Golang 基础"
        ],
        "summary": "已经专职做了很久的 Python 开发，不过心中对当初带我入行 C 也一直有些留恋。Go 语言的设计和定位和 C 语言有很多共同之处，也融入了很多现代的设计理念，写起来很有当初写 C 的亲切感。准备好好学习下这门语言，这里记录下一些个人觉得重要的基础知识点，随着不断深入再补充。",
        "title": "Go 基础知识点",
        "status": "Published",
        "urlname": "8a90fccd-b953-4c11-b81f-ef8fc113aa17",
        "updated": "2023-07-17 14:38:00"
      },
      "catalog": [
        {
          "title": "2019-01-31",
          "doc_id": "8a90fccd-b953-4c11-b81f-ef8fc113aa17"
        }
      ],
      "realName": "Go 基础知识点",
      "relativePath": "/2019-01-31/Go 基础知识点.md"
    },
    {
      "id": "15201ca9-e4bc-47e1-9a7e-08bf84a85d4e",
      "doc_id": "15201ca9-e4bc-47e1-9a7e-08bf84a85d4e",
      "updated": 1689575580000,
      "properties": {
        "date": "2019-06-19",
        "type": "Post",
        "category": "项目架构",
        "slug": "first-exploration-of-mirco-service",
        "tags": [
          "mircoservices",
          "Go",
          "go-mirco"
        ],
        "summary": "日常工作中一直在用 Django 这类 MVC 架构的框架来搭建后台。然而早已对微服务架构闻名已久，早想有机会实践一下，靠着搜索引擎找到这篇不错的教程：Golang 微服务教程，总结了微服务开发、测试到部署的完整过程。跟着初步实践了下微服务的构建过程，过了下微服务的瘾，在这里总结下。",
        "title": "初探微服务",
        "status": "Published",
        "urlname": "15201ca9-e4bc-47e1-9a7e-08bf84a85d4e",
        "updated": "2023-07-17 14:33:00"
      },
      "catalog": [
        {
          "title": "2019-06-19",
          "doc_id": "15201ca9-e4bc-47e1-9a7e-08bf84a85d4e"
        }
      ],
      "realName": "初探微服务",
      "relativePath": "/2019-06-19/初探微服务.md"
    },
    {
      "id": "aee256a0-e9d4-45bb-889d-1bca9f2c8251",
      "doc_id": "aee256a0-e9d4-45bb-889d-1bca9f2c8251",
      "updated": 1689575580000,
      "properties": {
        "date": "2019-09-01",
        "type": "Post",
        "category": "项目架构",
        "slug": "seckill-backend-system-base-on-go-micro",
        "tags": [
          "mircoservices",
          "go-mirco",
          "秒杀系统"
        ],
        "summary": "前段时间了解到了Go-micro这一微服务开发框架，并基于此框架的教程搭建了一套码头货运管理微服务系统。这次使用Micro来设计和实现了一套更接地气的秒杀系统。\n\n对于秒杀，以及抽奖、抢红包这类系统的最大特点便是在某个时间点会瞬间涌入大量的用户，给系统造成瞬间高于平时千百倍的并发压力。针对这样的特点在设计微服务时就需要考虑一系列的措施来保障系统在高并发场景时可以稳定运行。\n\n完整代码地址",
        "title": "基于Go-micro微服务的秒杀系统",
        "status": "Published",
        "urlname": "aee256a0-e9d4-45bb-889d-1bca9f2c8251",
        "updated": "2023-07-17 14:33:00"
      },
      "catalog": [
        {
          "title": "2019-09-01",
          "doc_id": "aee256a0-e9d4-45bb-889d-1bca9f2c8251"
        }
      ],
      "realName": "基于Go-micro微服务的秒杀系统",
      "relativePath": "/2019-09-01/基于Go-micro微服务的秒杀系统.md"
    },
    {
      "id": "8456f952-9d1d-4ebd-8a23-542c69ba7d68",
      "doc_id": "8456f952-9d1d-4ebd-8a23-542c69ba7d68",
      "updated": 1689575520000,
      "properties": {
        "date": "2019-12-18",
        "type": "Post",
        "category": "项目架构",
        "slug": "use-gin-and-websocket-to-play-rtsp-video",
        "tags": [
          "Gin",
          "WebSocket",
          "RTSP",
          "Go"
        ],
        "summary": "项目地址：gin-rtsp\n\n在后台的开发中遇到了对接显示摄像头视频流的需求。目前获取海康及大华等主流的摄像头的视频流使用的基本都是RTSP协议。不过HTML页面并不能直接播放RTSP协议的视频流，查询了一番各种网页播放RTSP的资料，有如下的一些方案：",
        "title": "使用Gin+WebSocket在HTML中无插件播放RTSP",
        "status": "Published",
        "urlname": "8456f952-9d1d-4ebd-8a23-542c69ba7d68",
        "updated": "2023-07-17 14:32:00"
      },
      "catalog": [
        {
          "title": "2019-12-18",
          "doc_id": "8456f952-9d1d-4ebd-8a23-542c69ba7d68"
        }
      ],
      "realName": "使用Gin+WebSocket在HTML中无插件播放RTSP",
      "relativePath": "/2019-12-18/使用Gin+WebSocket在HTML中无插件播放RTSP.md"
    },
    {
      "id": "0498bc63-4538-4d18-94f2-6edf9b92f43f",
      "doc_id": "0498bc63-4538-4d18-94f2-6edf9b92f43f",
      "updated": 1689696300000,
      "properties": {
        "date": "2020-01-01",
        "type": "Post",
        "category": "Golang",
        "slug": "golang-scheduler",
        "tags": [
          "Golang 底层",
          "Golang scheduler"
        ],
        "summary": "转载至 https://www.cnblogs.com/qcrao-2018/p/11442998.html, 一篇很不错讲解 Golang scheduler 的文章。\n\n在 Go 语言里，go func 是并发的单元，chan 是协调并发单元的机制，panic 和 recover 是出错处理的机制，而 defer 是神来之笔，大大简化了出错的管理。\n\nGoroutines 在同一个用户空间里同时独立执行 functions，channels 则用于 goroutines 间的通信和同步访问控制。",
        "title": "[转载]深度解密Go语言之 scheduler",
        "status": "Published",
        "urlname": "0498bc63-4538-4d18-94f2-6edf9b92f43f",
        "updated": "2023-07-19 00:05:00"
      },
      "catalog": [
        {
          "title": "2020-01-01",
          "doc_id": "0498bc63-4538-4d18-94f2-6edf9b92f43f"
        }
      ],
      "realName": "[转载]深度解密Go语言之 scheduler",
      "relativePath": "/2020-01-01/[转载]深度解密Go语言之 scheduler.md"
    },
    {
      "id": "0274ac91-4d69-4aa4-9fc2-4acdc6c306c8",
      "doc_id": "0274ac91-4d69-4aa4-9fc2-4acdc6c306c8",
      "updated": 1689564660000,
      "properties": {
        "date": "2020-02-10",
        "type": "Post",
        "category": "项目架构",
        "slug": "build-devops-project",
        "tags": [
          "devOps",
          "Jenkins",
          "kubernetes",
          "Gin"
        ],
        "summary": "在后端的开发领域，各类开发框架都已经很多，在开发项目时可以根据不同的需要和需求选择合适的开发框架。然而在需要开发一个完善的工程化项目时，仅仅一个后端开发框架是不够的，还面临着在对开发项目的快速迭代中进行测试，部署，监控等问题。为了解决这些问题，DevOps的开发模式应运而生。\n\n基于个人对DevOps的理解，搭建了一个基于Gin的开源后端项目来实践下DevOps的各个概念：https://github.com/wanghaoxi3000/advproject。\n\nDevOps是一个宽泛的概念，这个项目也只是抛砖引玉，在测试环境下串联起各个DevOps的基础工具，存在的不足欢迎指出，一起学习和交流。",
        "title": "搭建DevOps模式的项目",
        "status": "Published",
        "urlname": "0274ac91-4d69-4aa4-9fc2-4acdc6c306c8",
        "updated": "2023-07-17 11:31:00"
      },
      "catalog": [
        {
          "title": "2020-02-10",
          "doc_id": "0274ac91-4d69-4aa4-9fc2-4acdc6c306c8"
        }
      ],
      "realName": "搭建DevOps模式的项目",
      "relativePath": "/2020-02-10/搭建DevOps模式的项目.md"
    },
    {
      "id": "dbd2a274-4236-478d-9324-880043009ccd",
      "doc_id": "dbd2a274-4236-478d-9324-880043009ccd",
      "updated": 1689564600000,
      "properties": {
        "date": "2020-06-16",
        "type": "Post",
        "category": "Linux管理",
        "slug": "source-mirrors-change",
        "tags": [
          "mirror",
          "镜像源"
        ],
        "summary": "国内的网络问题，经常需要替换软件本身的更新源，加快软件的下载速度。这里记录下常用国内镜像源。",
        "title": "国内镜像源",
        "status": "Published",
        "urlname": "dbd2a274-4236-478d-9324-880043009ccd",
        "updated": "2023-07-17 11:30:00"
      },
      "catalog": [
        {
          "title": "2020-06-16",
          "doc_id": "dbd2a274-4236-478d-9324-880043009ccd"
        }
      ],
      "realName": "国内镜像源",
      "relativePath": "/2020-06-16/国内镜像源.md"
    },
    {
      "id": "de496bfb-9b9d-4b57-8faa-d40e479c7d41",
      "doc_id": "de496bfb-9b9d-4b57-8faa-d40e479c7d41",
      "updated": 1689564540000,
      "properties": {
        "date": "2020-06-23",
        "type": "Post",
        "category": "Golang",
        "slug": "the-value-type-struct-of-map-cannot-assign",
        "tags": [
          "Golang 基础"
        ],
        "summary": "在Golang中，当一个map的value为一个值类型的结构体时，是不能对其赋值的，修改结构体的数值的。",
        "title": "map中值类型结构体无法赋值",
        "status": "Published",
        "urlname": "de496bfb-9b9d-4b57-8faa-d40e479c7d41",
        "updated": "2023-07-17 11:29:00"
      },
      "catalog": [
        {
          "title": "2020-06-23",
          "doc_id": "de496bfb-9b9d-4b57-8faa-d40e479c7d41"
        }
      ],
      "realName": "map中值类型结构体无法赋值",
      "relativePath": "/2020-06-23/map中值类型结构体无法赋值.md"
    },
    {
      "id": "edb82b59-31b5-4fd6-bcd6-7fe3b8050d39",
      "doc_id": "edb82b59-31b5-4fd6-bcd6-7fe3b8050d39",
      "updated": 1689564480000,
      "properties": {
        "date": "2020-09-16",
        "type": "Post",
        "category": "Golang",
        "slug": "type-declarations-and-type-aliases",
        "tags": [
          "Golang 基础"
        ],
        "summary": "Golang 语言中，我们可以用关键字type声明自定义的各种类型。在使用type时，声明的自定义类型有不同的区别。",
        "title": "别名和类型再定义",
        "status": "Published",
        "urlname": "edb82b59-31b5-4fd6-bcd6-7fe3b8050d39",
        "updated": "2023-07-17 11:28:00"
      },
      "catalog": [
        {
          "title": "2020-09-16",
          "doc_id": "edb82b59-31b5-4fd6-bcd6-7fe3b8050d39"
        }
      ],
      "realName": "别名和类型再定义",
      "relativePath": "/2020-09-16/别名和类型再定义.md"
    },
    {
      "id": "5254d509-659c-488c-9fc6-28b07901dd5d",
      "doc_id": "5254d509-659c-488c-9fc6-28b07901dd5d",
      "updated": 1689564240000,
      "properties": {
        "date": "2020-10-01",
        "type": "Post",
        "category": "Golang",
        "slug": "run-goroutine-by-ordered",
        "tags": [
          "Golang 基础"
        ],
        "summary": "Golang 中 goroutine 中的运行是无序的，如果要让多个 goroutine 顺序执行，例如每个 goroutine 在并行执行时顺序打印 0-9，这里记录一种通过 atomic 包的原子操作来实现的方法。",
        "title": "多个goroutine按既定顺序运行",
        "status": "Published",
        "urlname": "5254d509-659c-488c-9fc6-28b07901dd5d",
        "updated": "2023-07-17 11:24:00"
      },
      "catalog": [
        {
          "title": "2020-10-01",
          "doc_id": "5254d509-659c-488c-9fc6-28b07901dd5d"
        }
      ],
      "realName": "多个goroutine按既定顺序运行",
      "relativePath": "/2020-10-01/多个goroutine按既定顺序运行.md"
    },
    {
      "id": "ba9c45bd-1568-4097-a5b4-e64168d3755d",
      "doc_id": "ba9c45bd-1568-4097-a5b4-e64168d3755d",
      "updated": 1689564180000,
      "properties": {
        "date": "2020-10-13",
        "type": "Post",
        "category": "Golang",
        "slug": "the-difference-of-range-array-and-slice",
        "tags": [
          "Golang 基础"
        ],
        "summary": "Go 语言的 range 表达式遵循如下两个规则：\nrange表达式只会在for语句开始执行时被求值一次，无论后边会有多少次迭代\nrange表达式的求值结果会被复制，也就是说，被迭代的对象是range表达式结果值的副本而不是原值",
        "title": "range 数组和切片的差异",
        "status": "Published",
        "urlname": "ba9c45bd-1568-4097-a5b4-e64168d3755d",
        "updated": "2023-07-17 11:23:00"
      },
      "catalog": [
        {
          "title": "2020-10-13",
          "doc_id": "ba9c45bd-1568-4097-a5b4-e64168d3755d"
        }
      ],
      "realName": "range 数组和切片的差异",
      "relativePath": "/2020-10-13/range 数组和切片的差异.md"
    },
    {
      "id": "8b9502d4-ae75-4a48-a9d4-081be28a8d4a",
      "doc_id": "8b9502d4-ae75-4a48-a9d4-081be28a8d4a",
      "updated": 1689564000000,
      "properties": {
        "date": "2020-11-25",
        "type": "Post",
        "category": "Golang",
        "slug": "go-advance-summary",
        "tags": [
          "Golang 基础"
        ],
        "summary": "看完了 go-advice, 记录下一些要点和自己值得注意的地方。",
        "title": "Go-Advance 总结",
        "status": "Published",
        "urlname": "8b9502d4-ae75-4a48-a9d4-081be28a8d4a",
        "updated": "2023-07-17 11:20:00"
      },
      "catalog": [
        {
          "title": "2020-11-25",
          "doc_id": "8b9502d4-ae75-4a48-a9d4-081be28a8d4a"
        }
      ],
      "realName": "Go-Advance 总结",
      "relativePath": "/2020-11-25/Go-Advance 总结.md"
    },
    {
      "id": "a13b76fb-7fff-4fb9-9cc6-f9ed602cf3fc",
      "doc_id": "a13b76fb-7fff-4fb9-9cc6-f9ed602cf3fc",
      "updated": 1689303840000,
      "properties": {
        "date": "2021-04-18",
        "type": "Post",
        "category": "kafka",
        "slug": "kafka-study-note--deploy-kafka-test-env-in-k8s",
        "tags": [
          "kafka",
          "k8s"
        ],
        "summary": "准备深入的学习下kafka，先从搭建一个开发环境，编写一个简单的测试程序开始吧。",
        "title": "kafka学习笔记-搭建基于k8s的kafka测试环境",
        "status": "Published",
        "urlname": "a13b76fb-7fff-4fb9-9cc6-f9ed602cf3fc",
        "updated": "2023-07-14 11:04:00"
      },
      "catalog": [
        {
          "title": "2021-04-18",
          "doc_id": "a13b76fb-7fff-4fb9-9cc6-f9ed602cf3fc"
        }
      ],
      "realName": "kafka学习笔记-搭建基于k8s的kafka测试环境",
      "relativePath": "/2021-04-18/kafka学习笔记-搭建基于k8s的kafka测试环境.md"
    },
    {
      "id": "c2c92a3e-f090-44de-a28e-12cb3fff3c20",
      "doc_id": "c2c92a3e-f090-44de-a28e-12cb3fff3c20",
      "updated": 1689303780000,
      "properties": {
        "date": "2021-05-11",
        "type": "Post",
        "category": "kafka",
        "slug": "kafka--kafka-study-note--kafka-term",
        "tags": [
          "kafka"
        ],
        "title": "kafka学习笔记-kafka术语介绍",
        "status": "Published",
        "urlname": "c2c92a3e-f090-44de-a28e-12cb3fff3c20",
        "updated": "2023-07-14 11:03:00"
      },
      "catalog": [
        {
          "title": "2021-05-11",
          "doc_id": "c2c92a3e-f090-44de-a28e-12cb3fff3c20"
        }
      ],
      "realName": "kafka学习笔记-kafka术语介绍",
      "relativePath": "/2021-05-11/kafka学习笔记-kafka术语介绍.md"
    },
    {
      "id": "8fa8898a-3851-4346-8e67-8d17aa5430f5",
      "doc_id": "8fa8898a-3851-4346-8e67-8d17aa5430f5",
      "updated": 1689303540000,
      "properties": {
        "date": "2022-02-27",
        "type": "Post",
        "category": "Golang",
        "slug": "the-design-and-implement-of-golang-malloc",
        "tags": [
          "Golang 原理"
        ],
        "summary": "原文链接 https://mp.weixin.qq.com/s/TO_lmlFbVDgFmns9s_mMzw\n\n程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包含两个重要区域 — 栈区（Stack）和堆区（Heap）。函数调用的参数、返回值以及局部变量大都会被分配到栈上，这部分内存会由编译器进行管理；不同编程语言使用不同的方法管理堆区的内存，C++ 等编程语言会由工程师主动申请和释放内存，Go 以及 Java 等编程语言会由工程师和编译器共同管理，堆中的对象由内存分配器分配并由垃圾收集器回收。\n\n不同的编程语言会选择不同的方式管理内存，本节会介绍 Go 语言内存分配器，详细分析内存分配的过程以及其背后的设计与实现原理。",
        "title": "Go 内存分配器的设计与实现[转载]",
        "status": "Published",
        "urlname": "8fa8898a-3851-4346-8e67-8d17aa5430f5",
        "updated": "2023-07-14 10:59:00"
      },
      "catalog": [
        {
          "title": "2022-02-27",
          "doc_id": "8fa8898a-3851-4346-8e67-8d17aa5430f5"
        }
      ],
      "realName": "Go 内存分配器的设计与实现[转载]",
      "relativePath": "/2022-02-27/Go 内存分配器的设计与实现[转载].md"
    },
    {
      "id": "6962857b-5906-4f7e-825a-d671e2b403e7",
      "doc_id": "6962857b-5906-4f7e-825a-d671e2b403e7",
      "updated": 1689301260000,
      "properties": {
        "date": "2022-09-25",
        "type": "Post",
        "category": "Golang",
        "slug": "golang-memory-escape",
        "tags": [
          "Golang 原理"
        ],
        "summary": "什么是内存逃逸在一段程序中，每一个函数都会有自己的内存区域存放自己的局部变量、返回地址等，这些内存会由编译器在栈中进行分配，每一个函数都会分配一个栈桢，在函数运行结束后进行销毁，但是有些变量我们想在函数运行结束后仍然使用它，那么就需要把这个变量在堆上分配，这种从\"栈\"上逃逸到\"堆\"上的现象就成为内存逃逸。",
        "title": "Golang 内存逃逸",
        "status": "Published",
        "urlname": "6962857b-5906-4f7e-825a-d671e2b403e7",
        "updated": "2023-07-14 10:21:00"
      },
      "catalog": [
        {
          "title": "2022-09-25",
          "doc_id": "6962857b-5906-4f7e-825a-d671e2b403e7"
        }
      ],
      "realName": "Golang 内存逃逸",
      "relativePath": "/2022-09-25/Golang 内存逃逸.md"
    },
    {
      "id": "8bdaf8a0-13cb-4050-9ba2-9775024c9cc9",
      "doc_id": "8bdaf8a0-13cb-4050-9ba2-9775024c9cc9",
      "updated": 1689300600000,
      "properties": {
        "date": "2022-10-30",
        "type": "Post",
        "category": "项目架构",
        "slug": "talk-about-load-blance-by-bilibili-crash-on-220713",
        "tags": [
          "Load Blance",
          "kubernetes"
        ],
        "summary": "前段时间看了B站发的20210713网站崩溃事件 的总结分析。小破站崩掉的具体原因已在文章做了详细的分析，就不在这里做详谈了，而是总结下文章多次提及了七层SLB、四层LB相关的 Load Balance 负载均衡知识点。",
        "title": "由B站210713崩溃事件聊聊负载均衡",
        "status": "Published",
        "urlname": "8bdaf8a0-13cb-4050-9ba2-9775024c9cc9",
        "updated": "2023-07-14 10:10:00"
      },
      "catalog": [
        {
          "title": "2022-10-30",
          "doc_id": "8bdaf8a0-13cb-4050-9ba2-9775024c9cc9"
        }
      ],
      "realName": "由B站210713崩溃事件聊聊负载均衡",
      "relativePath": "/2022-10-30/由B站210713崩溃事件聊聊负载均衡.md"
    },
    {
      "id": "64eee45b-1c09-4042-99bb-97164e113a1d",
      "doc_id": "64eee45b-1c09-4042-99bb-97164e113a1d",
      "updated": 1700581500000,
      "properties": {
        "date": "2018-08-23 00:00:00",
        "type": "Post",
        "category": "软件工具",
        "slug": "sometimes-useful-git-skill",
        "tags": [
          "Git"
        ],
        "title": "偶尔用得上的 Git 操作",
        "status": "Published",
        "urlname": "64eee45b-1c09-4042-99bb-97164e113a1d",
        "updated": "2023-11-21 23:45:00"
      },
      "catalog": [
        {
          "title": "2018-08-23 00:00:00",
          "doc_id": "64eee45b-1c09-4042-99bb-97164e113a1d"
        }
      ],
      "realName": "偶尔用得上的 Git 操作",
      "relativePath": "/2018-08-23 00:00:00/偶尔用得上的 Git 操作.md",
      "docPath": "article/2018-08-23 00:00:00"
    },
    {
      "id": "aaf7e84f-1b4d-44f6-a833-8e1e158edae9",
      "doc_id": "aaf7e84f-1b4d-44f6-a833-8e1e158edae9",
      "updated": 1689584880000,
      "properties": {
        "date": "2019-01-03",
        "type": "Post",
        "category": "软件工具",
        "slug": "manage-hexo-theme-with-git-submodules",
        "tags": [
          "Git"
        ],
        "summary": "hexo 中有着丰富的主题可以选择, 大部分的使用示例或者教程都是将主题 clone 到 theme 文件夹中来使用. 但这样来使用主题会存在如下的问题:\n- theme 中的主题属于一个独立的 Git 项目, 有自己的 .git 项目文件夹, 提交 hexo 项目时默认不会提交 theme 的 .git 文件夹, 在其他电脑上 clone 后会失去 theme 原本的版本控制功能.\n- 使用自己修改的主题时, 每次更改完主题, 需要在主题文件夹中提交一次, 然后再在 hexo 项目根文件夹中提交一次, 会产生两次修改内容一样的提交, 不够优雅.\n还好万能的 Git 针对这种问题已经有了成熟的解决方案, 通过自带的 Git submodules 功能即可优雅的避免以上的问题.",
        "title": "在 hexo 中使用 git submodules 管理主题",
        "status": "Published",
        "urlname": "aaf7e84f-1b4d-44f6-a833-8e1e158edae9",
        "updated": "2023-07-17 17:08:00"
      },
      "catalog": [
        {
          "title": "2019-01-03",
          "doc_id": "aaf7e84f-1b4d-44f6-a833-8e1e158edae9"
        }
      ],
      "realName": "在 hexo 中使用 git submodules 管理主题",
      "relativePath": "/2019-01-03/在 hexo 中使用 git submodules 管理主题.md"
    },
    {
      "id": "88579025-d6b7-43ae-98bb-12b52f90bcd9",
      "doc_id": "88579025-d6b7-43ae-98bb-12b52f90bcd9",
      "updated": 1689228840000,
      "properties": {
        "date": "2019-01-13",
        "type": "Post",
        "category": "软件工具",
        "slug": "versatility-uwsgi-config",
        "tags": [
          "Python",
          "nginx"
        ],
        "summary": "在进行 Python web 开发时，使用 Django、Flask 等框架开发完毕后，部署时通常需要选择一个支持 wsgi 协议的 Web 服务器程序。目前比较通用的选择是 nginx + uWSGI，使用 nginx 来处理静态文件请求，其余动态内容再转发给 uWSGI 交给 web 后台处理，网上这样的配置教程也是最多的。作为两款大名鼎鼎的服务器程序 nginx 负责静态文件，uWSGI 负责动态内容，各种在自己擅长的领域各施其职，的确效率很高，是高性能的 Python web 系统部署时的首选。不过有时用 Python 写了个小站点，性能需求并不高时。部署服务还要安装 nginx 和 uWSGI 两个服务器程序就显得有点麻烦了。能否把这些工作都交给一个服务器程序呢。",
        "title": "全能型 uWSGI 配置",
        "status": "Published",
        "urlname": "88579025-d6b7-43ae-98bb-12b52f90bcd9",
        "updated": "2023-07-13 14:14:00"
      },
      "catalog": [
        {
          "title": "2019-01-13",
          "doc_id": "88579025-d6b7-43ae-98bb-12b52f90bcd9"
        }
      ],
      "realName": "全能型 uWSGI 配置",
      "relativePath": "/2019-01-13/全能型 uWSGI 配置.md"
    },
    {
      "id": "cc4cad06-98f6-48d5-bab8-3ecfb7fd8230",
      "doc_id": "cc4cad06-98f6-48d5-bab8-3ecfb7fd8230",
      "updated": 1689228540000,
      "properties": {
        "date": "2019-03-17",
        "type": "Post",
        "category": "软件工具",
        "slug": "use-ci-system-to-free-time",
        "tags": [
          "CI",
          "Jenkins"
        ],
        "summary": "程序猿除了希望写好代码，一定也想着自己的项目可以如何快速的迭代上线，从而可以专注的完成代码的编写，减少繁杂的运维等工作。例如完成一项功能的开发后，推送到 Git 等代码管理系统后，剩下的测试、部署、上线等工作可以交给一个系统来自动化完成，这时便可以靠持续集成系统了。这里记录下我使用老牌的 Jenkins 持续集成系统来帮助自己完成的工作。",
        "title": "使用持续集成系统解放生产力",
        "status": "Published",
        "urlname": "cc4cad06-98f6-48d5-bab8-3ecfb7fd8230",
        "updated": "2023-07-13 14:09:00"
      },
      "catalog": [
        {
          "title": "2019-03-17",
          "doc_id": "cc4cad06-98f6-48d5-bab8-3ecfb7fd8230"
        }
      ],
      "realName": "使用持续集成系统解放生产力",
      "relativePath": "/2019-03-17/使用持续集成系统解放生产力.md"
    },
    {
      "id": "adf14ce3-4a96-4009-b132-1786ae179cc0",
      "doc_id": "adf14ce3-4a96-4009-b132-1786ae179cc0",
      "updated": 1689072660000,
      "properties": {
        "date": "2019-09-09",
        "type": "Post",
        "category": "软件工具",
        "slug": "deploy-kubernetes-on-ubuntu18",
        "tags": [
          "kubernetes"
        ],
        "summary": "为了有个k8s的测试环境，使用了三台ubuntu18的系统搭建了一套k8s测试环境，主要参考了和我一步步部署 kubernetes 集群这个项目，这个项目对于如何一步步搭建起k8s集群环境已经很详细了，不过对于ubuntu 18.04的环境还是有一些小坑，这里记录一下。",
        "title": "在ubuntu18.04上部署kubernetes",
        "status": "Published",
        "urlname": "adf14ce3-4a96-4009-b132-1786ae179cc0",
        "updated": "2023-07-11 18:51:00"
      },
      "catalog": [
        {
          "title": "2019-09-09",
          "doc_id": "adf14ce3-4a96-4009-b132-1786ae179cc0"
        }
      ],
      "realName": "在ubuntu18.04上部署kubernetes",
      "relativePath": "/2019-09-09/在ubuntu18.04上部署kubernetes.md"
    },
    {
      "id": "c631f70a-8388-4ff0-bfb4-c3e41fc3ece0",
      "doc_id": "c631f70a-8388-4ff0-bfb4-c3e41fc3ece0",
      "updated": 1689228600000,
      "properties": {
        "date": "2020-12-08",
        "type": "Post",
        "category": "软件工具",
        "slug": "sync-github-project-and-publish-on-coding",
        "tags": [
          "github",
          "coding",
          "devOps"
        ],
        "summary": "coding 提供了一套免费的静态页面服务，还可以自定义域名，本人的 airaNg 服务页面也是部署在coding的静态页面服务当中。不过 ariaNg 还会不断更新，如何在 ariaNg 原项目版本升级后自动更新自己部署的在 coding 的页面呢，这里利用 coding 自带的持续集成功能来完成这种自定义的操作。\n目前coding的静态页面服务已进行了修改，使用腾讯云的 oss 和 cdn 来部署了，虽然速度和稳定性有了提升，但可能也会产生费用。",
        "title": "使用coding自动同步和部署Github项目",
        "status": "Published",
        "urlname": "c631f70a-8388-4ff0-bfb4-c3e41fc3ece0",
        "updated": "2023-07-13 14:10:00"
      },
      "catalog": [
        {
          "title": "2020-12-08",
          "doc_id": "c631f70a-8388-4ff0-bfb4-c3e41fc3ece0"
        }
      ],
      "realName": "使用coding自动同步和部署Github项目",
      "relativePath": "/2020-12-08/使用coding自动同步和部署Github项目.md"
    },
    {
      "id": "854d17ad-00a6-4105-8292-ca67eea97d21",
      "doc_id": "854d17ad-00a6-4105-8292-ca67eea97d21",
      "updated": 1689301260000,
      "properties": {
        "date": "2022-09-13",
        "type": "Post",
        "category": "软件工具",
        "slug": "clang-header-file-not-fuound-under-mac",
        "tags": [
          "mac"
        ],
        "summary": "入手了一台 MacBook Air m2, 开始进入 MAC 的生态, 不过刚装好常用的开发环境, 在编译一个 golang 项目时就出现了一个找不到头文件的问题.",
        "title": "mac 系统找不到 clang 头文件",
        "status": "Published",
        "urlname": "854d17ad-00a6-4105-8292-ca67eea97d21",
        "updated": "2023-07-14 10:21:00"
      },
      "catalog": [
        {
          "title": "2022-09-13",
          "doc_id": "854d17ad-00a6-4105-8292-ca67eea97d21"
        }
      ],
      "realName": "mac 系统找不到 clang 头文件",
      "relativePath": "/2022-09-13/mac 系统找不到 clang 头文件.md"
    },
    {
      "id": "c370350a-d366-45a1-b383-b5056de0e7b0",
      "doc_id": "c370350a-d366-45a1-b383-b5056de0e7b0",
      "updated": 1689700260000,
      "properties": {
        "date": "2023-07-11",
        "type": "Post",
        "category": "软件工具",
        "slug": "deploy-download-tool-aria2-pro",
        "tags": [
          "aria2"
        ],
        "summary": "几年前刚搭建了黑群晖时，在群晖的 docker 中跑了一个网友改造的 aria2 下载器，包含了一个已经配置好的 aria2 内核和一个 AriaNG 控制页面。之后应该是一次也没更新过，如今这个 aria2 下载器下载BT种子的话已经基本没有任何速度。AriaNG 页面也落后了很多个版本了。想着更新一下，因此发现了这个项目：Aria2-Pro-Docker 。",
        "title": "部署下载神器 Aria2 Pro",
        "status": "Published",
        "urlname": "c370350a-d366-45a1-b383-b5056de0e7b0",
        "updated": "2023-07-19 01:11:00"
      },
      "catalog": [
        {
          "title": "2023-07-11",
          "doc_id": "c370350a-d366-45a1-b383-b5056de0e7b0"
        }
      ],
      "realName": "部署下载神器 Aria2 Pro",
      "relativePath": "/2023-07-11/部署下载神器 Aria2 Pro.md"
    },
    {
      "id": "e346dc18-cd99-4f15-8182-fc9ede484429",
      "doc_id": "e346dc18-cd99-4f15-8182-fc9ede484429",
      "updated": 1688554920000,
      "properties": {
        "date": "2023-04-09",
        "type": "Post",
        "category": "数字溪流",
        "slug": "one-week-essay-20230409",
        "tags": [
          "chatGPT",
          "MidJourney",
          "WakaTime"
        ],
        "summary": "有了小电驴后，这几周都有骑着出去兜兜风，发现了很多不知名的小角落，让自己对这座本以为很熟悉城市多了一些新鲜感。例如此图自于骑着电驴从公司回家的路程中，看到了路边的一座小游乐园，相比于单调的地铁，让这趟行程有趣了许多。",
        "title": "一周随笔20230409",
        "status": "Published",
        "urlname": "e346dc18-cd99-4f15-8182-fc9ede484429",
        "updated": "2023-07-05 19:02:00"
      },
      "catalog": [
        {
          "title": "2023-04-09",
          "doc_id": "e346dc18-cd99-4f15-8182-fc9ede484429"
        }
      ],
      "realName": "一周随笔20230409",
      "relativePath": "/2023-04-09/一周随笔20230409.md"
    },
    {
      "id": "46b9ecad-c2f6-4f79-bd50-b778ef0a0694",
      "doc_id": "46b9ecad-c2f6-4f79-bd50-b778ef0a0694",
      "updated": 1691748300000,
      "properties": {
        "date": "2022-07-23",
        "type": "Post",
        "category": "博客记录",
        "slug": "blog-decorate-record",
        "tags": [],
        "summary": "选定博客生成系统往往只是打造自己博客的第一步，这里记录了本博客从 hexo 迁移到 hugo 后，后续的功能集成步骤。",
        "title": "博客装修记",
        "status": "Published",
        "urlname": "46b9ecad-c2f6-4f79-bd50-b778ef0a0694",
        "updated": "2023-08-11 18:05:00"
      },
      "catalog": [
        {
          "title": "2022-07-23",
          "doc_id": "46b9ecad-c2f6-4f79-bd50-b778ef0a0694"
        }
      ],
      "realName": "博客装修记",
      "relativePath": "/2022-07-23/博客装修记.md"
    },
    {
      "id": "8eb3eefd-7ff0-40ff-abfe-3e16320737ee",
      "doc_id": "8eb3eefd-7ff0-40ff-abfe-3e16320737ee",
      "updated": 1688980320000,
      "properties": {
        "date": "2023-03-26",
        "type": "Post",
        "category": "数字溪流",
        "slug": "one-week-essay-20230226",
        "tags": [],
        "summary": "理想的Blog系统",
        "title": "一周随笔20230226",
        "status": "Published",
        "urlname": "8eb3eefd-7ff0-40ff-abfe-3e16320737ee",
        "updated": "2023-07-10 17:12:00"
      },
      "catalog": [
        {
          "title": "2023-03-26",
          "doc_id": "8eb3eefd-7ff0-40ff-abfe-3e16320737ee"
        }
      ],
      "realName": "一周随笔20230226",
      "relativePath": "/2023-03-26/一周随笔20230226.md"
    },
    {
      "id": "d8a704d7-d453-48c7-b249-a5e7ec0150b6",
      "doc_id": "d8a704d7-d453-48c7-b249-a5e7ec0150b6",
      "updated": 1693159860000,
      "properties": {
        "date": "2023-05-22",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2305-w1",
        "tags": [
          "技术见闻",
          "效率提升"
        ],
        "summary": "五一没出去旅游，回了趟家乡，位于四川南门的小城攀枝花。去年通了高铁，相比于之前动辄12小时的普通火车，现在只需要4个多小时既能回家一趟了。非常喜欢这座位于亚热带的城市气候，目前月份已是天天晴朗的阳光，光亮亮的但不会闷热，相比于时长阴沉沉的成都，心情会好上不少，走在商业区，灯光跟人气都还不错，烟火气息很足，一种安心的回家感。",
        "title": "数字溪流2305-W1",
        "status": "Published",
        "urlname": "d8a704d7-d453-48c7-b249-a5e7ec0150b6",
        "updated": "2023-08-28 02:11:00"
      },
      "catalog": [
        {
          "title": "2023-05-22",
          "doc_id": "d8a704d7-d453-48c7-b249-a5e7ec0150b6"
        }
      ],
      "realName": "数字溪流2305-W1",
      "relativePath": "/2023-05-22/数字溪流2305-W1.md"
    },
    {
      "id": "8a6872fc-1ca1-4f76-af70-f97d5c468b1e",
      "doc_id": "8a6872fc-1ca1-4f76-af70-f97d5c468b1e",
      "updated": 1688979780000,
      "properties": {
        "date": "2023-03-19",
        "type": "Post",
        "category": "数字溪流",
        "slug": "one-week-essay-20230319",
        "tags": [],
        "summary": "成功增驾摩托D照后，入手了人生第一台电摩，台铃赤兔。本来想买台铃的萌苏，不过家附近的店没有网上的款式，就看了这款。造型说不上多好看，胜在比较有特点吧，前后都有眼睛一样的双灯，两侧还有一排蓝灯，很有氛围，前轮的大碟刹也挺霸气，白色款还挺有兔子的感觉，车架也比较大，有赤兔马的气势。",
        "title": "一周随笔20230319",
        "status": "Published",
        "urlname": "8a6872fc-1ca1-4f76-af70-f97d5c468b1e",
        "updated": "2023-07-10 17:03:00"
      },
      "catalog": [
        {
          "title": "2023-03-19",
          "doc_id": "8a6872fc-1ca1-4f76-af70-f97d5c468b1e"
        }
      ],
      "realName": "一周随笔20230319",
      "relativePath": "/2023-03-19/一周随笔20230319.md"
    },
    {
      "id": "c99dd1d6-9b94-4bd6-8e34-ab5ba0aa894a",
      "doc_id": "c99dd1d6-9b94-4bd6-8e34-ab5ba0aa894a",
      "updated": 1691748300000,
      "properties": {
        "date": "2022-07-08",
        "type": "Post",
        "category": "博客记录",
        "slug": "move-blog-to-hugo",
        "tags": [],
        "summary": "经过了一段时间的纠结，还是把博客从Hexo迁移到了Hugo",
        "title": "迁移博客至Hugo",
        "status": "Published",
        "urlname": "c99dd1d6-9b94-4bd6-8e34-ab5ba0aa894a",
        "updated": "2023-08-11 18:05:00"
      },
      "catalog": [
        {
          "title": "2022-07-08",
          "doc_id": "c99dd1d6-9b94-4bd6-8e34-ab5ba0aa894a"
        }
      ],
      "realName": "迁移博客至Hugo",
      "relativePath": "/2022-07-08/迁移博客至Hugo.md"
    },
    {
      "id": "0433ceef-587e-4f62-bdce-5c25138bea96",
      "doc_id": "0433ceef-587e-4f62-bdce-5c25138bea96",
      "updated": 1688979900000,
      "properties": {
        "date": "2023-03-13",
        "type": "Post",
        "category": "数字溪流",
        "slug": "one-week-essay-20230313",
        "tags": [],
        "summary": "最近准备去增驾一个D照, 一个是闲着没事学点技能以后说不定也用得着(~~入职美团外卖部啥的~~), 另外夏天快要来了, 想入手一辆电摩去兜兜风. 按新国标来看, 电摩也属于摩托车需要通过驾照考试才能上路的.",
        "title": "一周随笔20230313",
        "status": "Published",
        "urlname": "0433ceef-587e-4f62-bdce-5c25138bea96",
        "updated": "2023-07-10 17:05:00"
      },
      "catalog": [
        {
          "title": "2023-03-13",
          "doc_id": "0433ceef-587e-4f62-bdce-5c25138bea96"
        }
      ],
      "realName": "一周随笔20230313",
      "relativePath": "/2023-03-13/一周随笔20230313.md"
    },
    {
      "id": "22562976-5d02-440f-bca6-042e5cb93a10",
      "doc_id": "22562976-5d02-440f-bca6-042e5cb93a10",
      "updated": 1700041620000,
      "properties": {
        "date": "2023-08-27",
        "type": "Post",
        "category": "博客记录",
        "slug": "backup-notion-to-github",
        "tags": [
          "notion"
        ],
        "summary": "在开始使用 Notion 编写文档并通过 NextNotion 来发布博客后，整个博客的管理和书写体验感觉流畅了不少，不过整个博客的数据放在 Notion 中，心里多少还是有些担忧，假如以后想再迁移到其他的平台岂不是很麻烦，最好有一种方法可以批量导出 Notion 中的文档为 markdown，这样就可以把数据掌握在自己手里，随时可以迁移，再通过 Git 来管理，每个文档还可以有变更的历史记录，再也没有后顾之忧。",
        "title": "备份 Notion 文档到 Github",
        "status": "Published",
        "urlname": "22562976-5d02-440f-bca6-042e5cb93a10",
        "updated": "2023-11-15 17:47:00"
      },
      "catalog": [
        {
          "title": "2023-08-27",
          "doc_id": "22562976-5d02-440f-bca6-042e5cb93a10"
        }
      ],
      "realName": "备份 Notion 文档到 Github",
      "relativePath": "/2023-08-27/备份 Notion 文档到 Github.md"
    },
    {
      "id": "cf75d99b-267a-47b1-a9e6-170495b8a355",
      "doc_id": "cf75d99b-267a-47b1-a9e6-170495b8a355",
      "updated": 1696759080000,
      "properties": {
        "date": "2023-08-28",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2308-w4",
        "tags": [],
        "summary": "周末去附近的一个场地开了下卡丁车，这家公司最近应该是在抖音上打了不少广告，刷到了好几次，不过我本身还挺有兴趣，价格也不算贵，几十块钱可以跑四圈，跑道一圈有一公里多的样子，就来体验了一下。总体还算不错，赛道挺大，就是人有点多，排了一个多小时。卡丁车极速有个四五十码，安全防护措施挺到位的，可以小小的发泄一下速度与激情。",
        "title": "数字溪流2308-W4",
        "status": "Published",
        "urlname": "cf75d99b-267a-47b1-a9e6-170495b8a355",
        "updated": "2023-10-08 17:58:00"
      },
      "catalog": [
        {
          "title": "2023-08-28",
          "doc_id": "cf75d99b-267a-47b1-a9e6-170495b8a355"
        }
      ],
      "realName": "数字溪流2308-W4",
      "relativePath": "/2023-08-28/数字溪流2308-W4.md"
    },
    {
      "id": "a42357d4-f7fc-4031-a2ae-048dabd15c12",
      "doc_id": "a42357d4-f7fc-4031-a2ae-048dabd15c12",
      "updated": 1693809840000,
      "properties": {
        "date": "2023-09-04",
        "type": "Post",
        "category": "打工人生",
        "slug": "whether-to-change-a-job",
        "tags": [
          "转载",
          "跳槽"
        ],
        "summary": "即刻上看到一篇分析自己要不要跳槽的动态, 感觉挺有用的, 转载记录一下.",
        "title": "[转载] 要不要跳槽",
        "status": "Published",
        "urlname": "a42357d4-f7fc-4031-a2ae-048dabd15c12",
        "updated": "2023-09-04 14:44:00"
      },
      "catalog": [
        {
          "title": "2023-09-04",
          "doc_id": "a42357d4-f7fc-4031-a2ae-048dabd15c12"
        }
      ],
      "realName": "[转载] 要不要跳槽",
      "relativePath": "/2023-09-04/[转载] 要不要跳槽.md"
    },
    {
      "id": "44e7d168-2e30-49a4-8cda-c925ceb1b134",
      "doc_id": "44e7d168-2e30-49a4-8cda-c925ceb1b134",
      "updated": 1697388780000,
      "properties": {
        "date": "2023-10-14",
        "type": "Post",
        "category": "旅行游记",
        "slug": "travel-hongkong-with-storm",
        "tags": [
          "香港"
        ],
        "summary": "国庆的前几周, 趁着女友的一个工作空档, 顺便也想着避开下国庆的出行高峰, 提前请了几天假去香港游玩了一圈. 本是一场规划了几周的旅行, 想去的地方也很多, 沿途还准备顺便逛逛深圳, 但我们的行程只有四天, 注定得是一场特种兵式的打卡游. 而且很不巧的是, 出行的日子正好赶上了 “海葵” 台风降临, 天天都是瓢泼大雨 ,深圳和香港都淹了不少地方, 新闻更是称之为百年不遇的大雨, 每天起床看着窗外的大雨都想从心底大喊一声家人们, 谁懂啊 ~",
        "title": "风雨中的香港打卡游",
        "status": "Published",
        "urlname": "44e7d168-2e30-49a4-8cda-c925ceb1b134",
        "updated": "2023-10-16 00:53:00"
      },
      "catalog": [
        {
          "title": "2023-10-14",
          "doc_id": "44e7d168-2e30-49a4-8cda-c925ceb1b134"
        }
      ],
      "realName": "风雨中的香港打卡游",
      "relativePath": "/2023-10-14/风雨中的香港打卡游.md"
    },
    {
      "id": "afdb2f97-8c68-471a-b29f-cc0924862d04",
      "doc_id": "afdb2f97-8c68-471a-b29f-cc0924862d04",
      "updated": 1700042340000,
      "properties": {
        "date": "2023-11-15",
        "type": "Post",
        "category": "Golang",
        "slug": "golang-use-functional-options-pattern-to-set-config",
        "tags": [
          "Golang 技法"
        ],
        "summary": "在需要传递和初始化校验参数列表的时候使用这种方式来传递配置参数.",
        "title": "Golang 使用 Functional Options Pattern 传递参数",
        "status": "Published",
        "urlname": "afdb2f97-8c68-471a-b29f-cc0924862d04",
        "updated": "2023-11-15 17:59:00"
      },
      "catalog": [
        {
          "title": "2023-11-15",
          "doc_id": "afdb2f97-8c68-471a-b29f-cc0924862d04"
        }
      ],
      "realName": "Golang 使用 Functional Options Pattern 传递参数",
      "relativePath": "/2023-11-15/Golang 使用 Functional Options Pattern 传递参数.md"
    },
    {
      "id": "fd8b9c85-f1c9-494b-8ce3-3932eeb4f429",
      "doc_id": "fd8b9c85-f1c9-494b-8ce3-3932eeb4f429",
      "updated": 1699809840000,
      "properties": {
        "date": "2023-11-13",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2311-w2",
        "tags": [],
        "summary": "同学结婚，去了一趟重庆大足，顺道看了下有名的大足石刻。这里有很多关于宗教的雕刻，图中便是一个六道轮回的刻画，感觉很有寓意，佩服古人那种条件下还能创作出这样的作品。景区的石刻范围其实没多大，最多半小时应该就能逛完，不过感觉蕴含了许多的故事，可以找个导游或者提前做好功课再去看看，应该可以看出更多的门道。",
        "title": "数字溪流2311-W2",
        "status": "Published",
        "urlname": "fd8b9c85-f1c9-494b-8ce3-3932eeb4f429",
        "updated": "2023-11-13 01:24:00"
      },
      "catalog": [
        {
          "title": "2023-11-13",
          "doc_id": "fd8b9c85-f1c9-494b-8ce3-3932eeb4f429"
        }
      ],
      "realName": "数字溪流2311-W2",
      "relativePath": "/2023-11-13/数字溪流2311-W2.md"
    },
    {
      "id": "57bfdc7b-e11c-4e5a-92a8-4c46a419cc5e",
      "doc_id": "57bfdc7b-e11c-4e5a-92a8-4c46a419cc5e",
      "updated": 1700403480000,
      "properties": {
        "date": "2023-11-19 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2311-w3",
        "tags": [],
        "summary": "每天晚上下班出地铁口时，都能看到这些地铁口的流动小贩，光顾的顾客还挺多的，偶尔来了胃口也会在这些小摊中买个煎饼或者烧烤啥的填填肚子，冬日来临，伴随着这些喧嚣回家也有一种暖暖的烟火气。",
        "title": "数字溪流2311-W3",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/53bbdd23-7e15-404b-8e95-4c83e38e8095/IMG_6932.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20231119%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231119T143510Z&X-Amz-Expires=3600&X-Amz-Signature=e7acd7d2c331a69a372ac392da5ad2d23bf91c6c4e7aac3d7aedc0a6ef7ed4cd&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "57bfdc7b-e11c-4e5a-92a8-4c46a419cc5e",
        "updated": "2023-11-19 22:18:00"
      },
      "catalog": [
        {
          "title": "2023-11-19 00:00:00",
          "doc_id": "57bfdc7b-e11c-4e5a-92a8-4c46a419cc5e"
        }
      ],
      "realName": "数字溪流2311-W3",
      "relativePath": "/2023-11-19 00:00:00/数字溪流2311-W3.md",
      "docPath": "article/2023-11-19 00:00:00"
    },
    {
      "id": "9d99c32b-9b32-42f1-a052-f4b9db00f103",
      "doc_id": "9d99c32b-9b32-42f1-a052-f4b9db00f103",
      "updated": 1702219740000,
      "properties": {
        "date": "2023-12-10 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2312-w2",
        "tags": [],
        "summary": "东湖公园是每天上班都会经过的一个站，离家也不远，这周末就顺便来这里逛了一下，风景不错，很多人在这里露营和拍照，一圈围湖的公路也适合跑步锻炼，是一个休闲的好去处。",
        "title": "数字溪流2312-W2",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/42eb7411-d5a9-4ec2-bf5f-34bf4a5d6391/1.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231212%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231212T154613Z&X-Amz-Expires=3600&X-Amz-Signature=d6e5427d22042b39ae585100a00ad749a109fca05aebb5f5d152a014b3c5580f&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "9d99c32b-9b32-42f1-a052-f4b9db00f103",
        "updated": "2023-12-10 22:49:00"
      },
      "catalog": [
        {
          "title": "2023-12-10 00:00:00",
          "doc_id": "9d99c32b-9b32-42f1-a052-f4b9db00f103"
        }
      ],
      "realName": "数字溪流2312-W2",
      "relativePath": "/2023-12-10 00:00:00/数字溪流2312-W2.md",
      "docPath": "article/2023-12-10 00:00:00"
    },
    {
      "id": "4cfa93f6-5edd-4510-a4a0-bde3e3ed2609",
      "doc_id": "4cfa93f6-5edd-4510-a4a0-bde3e3ed2609",
      "updated": 1701017340000,
      "properties": {
        "date": "2023-11-26 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2311-w4",
        "tags": [],
        "summary": "冬日里难得出了点阳光，于是去了附近的一家猫咖来吸吸猫咪。和毛绒绒的可爱猫咪们待一会真的很治愈，这家猫咖的猫咪们也很会营业，好几只都会主动往怀里钻。不过吸久了还是有点副作用，大概是通风不太好，猫咪也比较多，回来便流了一晚上鼻涕。",
        "title": "数字溪流2311-W4",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/b6a4d417-5e21-429f-acce-ceb4d1a5e41a/IMG_6952.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231212%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231212T154613Z&X-Amz-Expires=3600&X-Amz-Signature=9594f2121013ed4d978018ed37c7248b429bc9c11b55c176b3a21897bb1ee38d&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "4cfa93f6-5edd-4510-a4a0-bde3e3ed2609",
        "updated": "2023-11-27 00:49:00"
      },
      "catalog": [
        {
          "title": "2023-11-26 00:00:00",
          "doc_id": "4cfa93f6-5edd-4510-a4a0-bde3e3ed2609"
        }
      ],
      "realName": "数字溪流2311-W4",
      "relativePath": "/2023-11-26 00:00:00/数字溪流2311-W4.md",
      "docPath": "article/2023-11-26 00:00:00"
    },
    {
      "id": "aa7fe768-613b-4fbb-a4b9-7b6e6ffa97ac",
      "doc_id": "aa7fe768-613b-4fbb-a4b9-7b6e6ffa97ac",
      "updated": 1703604420000,
      "properties": {
        "date": "2023-12-25 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2312-w4",
        "tags": [],
        "summary": "楼下宠物店新引进的蜥蜴，很少见到这类宠物，看起来倒是呆呆的。在程序员开发界，蜥蜴书常常是代表了各语言的指导书籍，质量很高，看看小蜥蜴，跟着它们一起掌握更多的知识吧。\n\n本期要点: Blossom 双链笔记, Mac 教程, Marker 文件转换, GPT-API-free, Snowflake, 木卫二, 英语学习",
        "title": "数字溪流2312-W4",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/3a7e7e28-7e18-4f4d-b804-1a495aa824c1/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231225012542.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=4887c30da963349e52c8f768365c3362fcb4ae145bee598c8bdb59f9014f330b&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "aa7fe768-613b-4fbb-a4b9-7b6e6ffa97ac",
        "updated": "2023-12-26 23:27:00"
      },
      "catalog": [
        {
          "title": "2023-12-25 00:00:00",
          "doc_id": "aa7fe768-613b-4fbb-a4b9-7b6e6ffa97ac"
        }
      ],
      "realName": "数字溪流2312-W4",
      "relativePath": "/2023-12-25 00:00:00/数字溪流2312-W4.md",
      "docPath": "article/2023-12-25 00:00:00"
    }
  ],
  "catalog": [
    {
      "object": "page",
      "id": "aa7fe768-613b-4fbb-a4b9-7b6e6ffa97ac",
      "created_time": "2023-12-24T06:46:00.000Z",
      "last_edited_time": "2023-12-26T15:27:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/3a7e7e28-7e18-4f4d-b804-1a495aa824c1/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231225012542.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=4887c30da963349e52c8f768365c3362fcb4ae145bee598c8bdb59f9014f330b&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2023-12-26T16:28:34.574Z"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "date": "2023-12-25 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2312-w4",
        "tags": [],
        "summary": "楼下宠物店新引进的蜥蜴，很少见到这类宠物，看起来倒是呆呆的。在程序员开发界，蜥蜴书常常是代表了各语言的指导书籍，质量很高，看看小蜥蜴，跟着它们一起掌握更多的知识吧。\n\n本期要点: Blossom 双链笔记, Mac 教程, Marker 文件转换, GPT-API-free, Snowflake, 木卫二, 英语学习",
        "title": "数字溪流2312-W4",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/3a7e7e28-7e18-4f4d-b804-1a495aa824c1/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231225012542.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=4887c30da963349e52c8f768365c3362fcb4ae145bee598c8bdb59f9014f330b&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "aa7fe768-613b-4fbb-a4b9-7b6e6ffa97ac",
        "updated": "2023-12-26 23:27:00"
      },
      "url": "https://www.notion.so/2312-W4-aa7fe768613b4fbba4b97b6e6ffa97ac",
      "public_url": "https://military-albatross-7a9.notion.site/2312-W4-aa7fe768613b4fbba4b97b6e6ffa97ac"
    },
    {
      "object": "page",
      "id": "9d99c32b-9b32-42f1-a052-f4b9db00f103",
      "created_time": "2023-12-10T10:16:00.000Z",
      "last_edited_time": "2023-12-10T14:49:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/42eb7411-d5a9-4ec2-bf5f-34bf4a5d6391/1.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=6684afc63e561daaec83e6a264c0338d6a5923131e707e530bf40701ce6fcbb0&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2023-12-26T16:28:34.575Z"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-10 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2312-w2",
        "tags": [],
        "summary": "东湖公园是每天上班都会经过的一个站，离家也不远，这周末就顺便来这里逛了一下，风景不错，很多人在这里露营和拍照，一圈围湖的公路也适合跑步锻炼，是一个休闲的好去处。",
        "title": "数字溪流2312-W2",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/42eb7411-d5a9-4ec2-bf5f-34bf4a5d6391/1.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=6684afc63e561daaec83e6a264c0338d6a5923131e707e530bf40701ce6fcbb0&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "9d99c32b-9b32-42f1-a052-f4b9db00f103",
        "updated": "2023-12-10 22:49:00"
      },
      "url": "https://www.notion.so/2312-W2-9d99c32b9b3242f1a052f4b9db00f103",
      "public_url": "https://military-albatross-7a9.notion.site/2312-W2-9d99c32b9b3242f1a052f4b9db00f103"
    },
    {
      "object": "page",
      "id": "4cfa93f6-5edd-4510-a4a0-bde3e3ed2609",
      "created_time": "2023-11-26T14:13:00.000Z",
      "last_edited_time": "2023-11-26T16:49:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/b6a4d417-5e21-429f-acce-ceb4d1a5e41a/IMG_6952.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=5886d5e788252daf44c39e9e598bc3082e30116968c206d42202f47ab6c9d304&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2023-12-26T16:28:34.575Z"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-26 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2311-w4",
        "tags": [],
        "summary": "冬日里难得出了点阳光，于是去了附近的一家猫咖来吸吸猫咪。和毛绒绒的可爱猫咪们待一会真的很治愈，这家猫咖的猫咪们也很会营业，好几只都会主动往怀里钻。不过吸久了还是有点副作用，大概是通风不太好，猫咪也比较多，回来便流了一晚上鼻涕。",
        "title": "数字溪流2311-W4",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/b6a4d417-5e21-429f-acce-ceb4d1a5e41a/IMG_6952.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=5886d5e788252daf44c39e9e598bc3082e30116968c206d42202f47ab6c9d304&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "4cfa93f6-5edd-4510-a4a0-bde3e3ed2609",
        "updated": "2023-11-27 00:49:00"
      },
      "url": "https://www.notion.so/2311-W4-4cfa93f65edd4510a4a0bde3e3ed2609",
      "public_url": "https://military-albatross-7a9.notion.site/2311-W4-4cfa93f65edd4510a4a0bde3e3ed2609"
    },
    {
      "object": "page",
      "id": "57bfdc7b-e11c-4e5a-92a8-4c46a419cc5e",
      "created_time": "2023-11-19T12:43:00.000Z",
      "last_edited_time": "2023-11-19T14:18:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/53bbdd23-7e15-404b-8e95-4c83e38e8095/IMG_6932.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=91dab1a15cb9305fb5cbf79002837ebcc5465a6e6237eaa2c665eba4f58a0127&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2023-12-26T16:28:34.576Z"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-19 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2311-w3",
        "tags": [],
        "summary": "每天晚上下班出地铁口时，都能看到这些地铁口的流动小贩，光顾的顾客还挺多的，偶尔来了胃口也会在这些小摊中买个煎饼或者烧烤啥的填填肚子，冬日来临，伴随着这些喧嚣回家也有一种暖暖的烟火气。",
        "title": "数字溪流2311-W3",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/53bbdd23-7e15-404b-8e95-4c83e38e8095/IMG_6932.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=91dab1a15cb9305fb5cbf79002837ebcc5465a6e6237eaa2c665eba4f58a0127&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "57bfdc7b-e11c-4e5a-92a8-4c46a419cc5e",
        "updated": "2023-11-19 22:18:00"
      },
      "url": "https://www.notion.so/2311-W3-57bfdc7be11c4e5a92a84c46a419cc5e",
      "public_url": "https://military-albatross-7a9.notion.site/2311-W3-57bfdc7be11c4e5a92a84c46a419cc5e"
    },
    {
      "object": "page",
      "id": "afdb2f97-8c68-471a-b29f-cc0924862d04",
      "created_time": "2023-11-15T09:48:00.000Z",
      "last_edited_time": "2023-11-15T09:59:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-15 00:00:00",
        "type": "Post",
        "category": "Golang",
        "slug": "golang-use-functional-options-pattern-to-set-config",
        "tags": [
          "Golang 技法"
        ],
        "summary": "在需要传递和初始化校验参数列表的时候使用这种方式来传递配置参数.",
        "title": "Golang 使用 Functional Options Pattern 传递参数",
        "status": "Published",
        "urlname": "afdb2f97-8c68-471a-b29f-cc0924862d04",
        "updated": "2023-11-15 17:59:00"
      },
      "url": "https://www.notion.so/Golang-Functional-Options-Pattern-afdb2f978c68471ab29fcc0924862d04",
      "public_url": "https://military-albatross-7a9.notion.site/Golang-Functional-Options-Pattern-afdb2f978c68471ab29fcc0924862d04"
    },
    {
      "object": "page",
      "id": "fd8b9c85-f1c9-494b-8ce3-3932eeb4f429",
      "created_time": "2023-11-12T06:11:00.000Z",
      "last_edited_time": "2023-11-12T17:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/f50d30d4-b6da-4091-a40c-d2aaae558b34/_cgi-bin_mmwebwx-bin_webwxgetmsgimg__MsgID6430506396690037757skeycrypt_24bd9668_650e8bf8ca91b8ecb3c3bd2a997780fdmmweb_appidwx_webfilehelper_%281%29.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=13c233ec12102e0c828ee7c11f8cded4c3a6e87c9364e48e5a4f3324572269c1&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2023-12-26T16:28:34.576Z"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-13 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2311-w2",
        "tags": [],
        "summary": "同学结婚，去了一趟重庆大足，顺道看了下有名的大足石刻。这里有很多关于宗教的雕刻，图中便是一个六道轮回的刻画，感觉很有寓意，佩服古人那种条件下还能创作出这样的作品。景区的石刻范围其实没多大，最多半小时应该就能逛完，不过感觉蕴含了许多的故事，可以找个导游或者提前做好功课再去看看，应该可以看出更多的门道。",
        "title": "数字溪流2311-W2",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/f50d30d4-b6da-4091-a40c-d2aaae558b34/_cgi-bin_mmwebwx-bin_webwxgetmsgimg__MsgID6430506396690037757skeycrypt_24bd9668_650e8bf8ca91b8ecb3c3bd2a997780fdmmweb_appidwx_webfilehelper_%281%29.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=13c233ec12102e0c828ee7c11f8cded4c3a6e87c9364e48e5a4f3324572269c1&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "fd8b9c85-f1c9-494b-8ce3-3932eeb4f429",
        "updated": "2023-11-13 01:24:00"
      },
      "url": "https://www.notion.so/2311-W2-fd8b9c85f1c9494b8ce33932eeb4f429",
      "public_url": "https://military-albatross-7a9.notion.site/2311-W2-fd8b9c85f1c9494b8ce33932eeb4f429"
    },
    {
      "object": "page",
      "id": "44e7d168-2e30-49a4-8cda-c925ceb1b134",
      "created_time": "2023-09-26T17:31:00.000Z",
      "last_edited_time": "2023-10-15T16:53:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/9ab6683d-d34f-4e16-881a-38933bd451a5/002.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=5d9e957a89f8dc0516e61042c99a7e15f6f62468ed393d6c2fbfc2afa8d3f467&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2023-12-26T16:28:34.592Z"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-14 00:00:00",
        "type": "Post",
        "category": "旅行游记",
        "slug": "travel-hongkong-with-storm",
        "tags": [
          "香港"
        ],
        "summary": "国庆的前几周, 趁着女友的一个工作空档, 顺便也想着避开下国庆的出行高峰, 提前请了几天假去香港游玩了一圈. 本是一场规划了几周的旅行, 想去的地方也很多, 沿途还准备顺便逛逛深圳, 但我们的行程只有四天, 注定得是一场特种兵式的打卡游. 而且很不巧的是, 出行的日子正好赶上了 “海葵” 台风降临, 天天都是瓢泼大雨 ,深圳和香港都淹了不少地方, 新闻更是称之为百年不遇的大雨, 每天起床看着窗外的大雨都想从心底大喊一声家人们, 谁懂啊 ~",
        "title": "风雨中的香港打卡游",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/9ab6683d-d34f-4e16-881a-38933bd451a5/002.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=5d9e957a89f8dc0516e61042c99a7e15f6f62468ed393d6c2fbfc2afa8d3f467&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "44e7d168-2e30-49a4-8cda-c925ceb1b134",
        "updated": "2023-10-16 00:53:00"
      },
      "url": "https://www.notion.so/44e7d1682e3049a48cdac925ceb1b134",
      "public_url": "https://military-albatross-7a9.notion.site/44e7d1682e3049a48cdac925ceb1b134"
    },
    {
      "object": "page",
      "id": "a42357d4-f7fc-4031-a2ae-048dabd15c12",
      "created_time": "2023-09-04T06:36:00.000Z",
      "last_edited_time": "2023-09-04T06:44:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-04 00:00:00",
        "type": "Post",
        "category": "打工人生",
        "slug": "whether-to-change-a-job",
        "tags": [
          "转载",
          "跳槽"
        ],
        "summary": "即刻上看到一篇分析自己要不要跳槽的动态, 感觉挺有用的, 转载记录一下.",
        "title": "[转载] 要不要跳槽",
        "status": "Published",
        "urlname": "a42357d4-f7fc-4031-a2ae-048dabd15c12",
        "updated": "2023-09-04 14:44:00"
      },
      "url": "https://www.notion.so/a42357d4f7fc4031a2ae048dabd15c12",
      "public_url": "https://military-albatross-7a9.notion.site/a42357d4f7fc4031a2ae048dabd15c12"
    },
    {
      "object": "page",
      "id": "cf75d99b-267a-47b1-a9e6-170495b8a355",
      "created_time": "2023-08-27T15:11:00.000Z",
      "last_edited_time": "2023-10-08T09:58:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/2a3d1a02-b06d-47ac-8d8c-023a502da971/Untitled.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=df8bd39ab3b4e5746ff7ec20291acfdb9aceb8c8cf88984dd705d505b764b0ae&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2023-12-26T16:28:34.577Z"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-08-28 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2308-w4",
        "tags": [],
        "summary": "周末去附近的一个场地开了下卡丁车，这家公司最近应该是在抖音上打了不少广告，刷到了好几次，不过我本身还挺有兴趣，价格也不算贵，几十块钱可以跑四圈，跑道一圈有一公里多的样子，就来体验了一下。总体还算不错，赛道挺大，就是人有点多，排了一个多小时。卡丁车极速有个四五十码，安全防护措施挺到位的，可以小小的发泄一下速度与激情。",
        "title": "数字溪流2308-W4",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/2a3d1a02-b06d-47ac-8d8c-023a502da971/Untitled.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=df8bd39ab3b4e5746ff7ec20291acfdb9aceb8c8cf88984dd705d505b764b0ae&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "cf75d99b-267a-47b1-a9e6-170495b8a355",
        "updated": "2023-10-08 17:58:00"
      },
      "url": "https://www.notion.so/2308-W4-cf75d99b267a47b1a9e6170495b8a355",
      "public_url": "https://military-albatross-7a9.notion.site/2308-W4-cf75d99b267a47b1a9e6170495b8a355"
    },
    {
      "object": "page",
      "id": "b658d5ed-817b-44f3-9443-839161b38ad3",
      "created_time": "2023-08-13T13:14:00.000Z",
      "last_edited_time": "2023-08-27T18:11:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/7912828d-2996-49e8-a0d1-d9d8110bc7bc/5dc29d8.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=f438012a9bc15cba6c760703fb86eb4ec130e6b2f47cbd04e711b6435910cfb9&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2023-12-26T16:28:34.577Z"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-08-13 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2308-w2",
        "tags": [],
        "summary": "周末和亲戚朋友们去了峨眉的七里坪禅道，也许正是成都最热的时候，普通的周末也有很多人，不过和亲近的人一起游玩下还是很愉悦的。这里离峨眉索道不远，不过知道的人应该还不多，想避开攀登峨眉的大部队在附近登山打卡一下的话可以在这里试试。",
        "title": "数字溪流2308-W2",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/7912828d-2996-49e8-a0d1-d9d8110bc7bc/5dc29d8.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=f438012a9bc15cba6c760703fb86eb4ec130e6b2f47cbd04e711b6435910cfb9&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "b658d5ed-817b-44f3-9443-839161b38ad3",
        "updated": "2023-08-28 02:11:00"
      },
      "url": "https://www.notion.so/2308-W2-b658d5ed817b44f39443839161b38ad3",
      "public_url": "https://military-albatross-7a9.notion.site/2308-W2-b658d5ed817b44f39443839161b38ad3"
    },
    {
      "object": "page",
      "id": "22562976-5d02-440f-bca6-042e5cb93a10",
      "created_time": "2023-08-03T15:24:00.000Z",
      "last_edited_time": "2023-11-15T09:47:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-08-27 00:00:00",
        "type": "Post",
        "category": "博客记录",
        "slug": "backup-notion-to-github",
        "tags": [
          "notion"
        ],
        "summary": "在开始使用 Notion 编写文档并通过 NextNotion 来发布博客后，整个博客的管理和书写体验感觉流畅了不少，不过整个博客的数据放在 Notion 中，心里多少还是有些担忧，假如以后想再迁移到其他的平台岂不是很麻烦，最好有一种方法可以批量导出 Notion 中的文档为 markdown，这样就可以把数据掌握在自己手里，随时可以迁移，再通过 Git 来管理，每个文档还可以有变更的历史记录，再也没有后顾之忧。",
        "title": "备份 Notion 文档到 Github",
        "status": "Published",
        "urlname": "22562976-5d02-440f-bca6-042e5cb93a10",
        "updated": "2023-11-15 17:47:00"
      },
      "url": "https://www.notion.so/Notion-Github-225629765d02440fbca6042e5cb93a10",
      "public_url": "https://military-albatross-7a9.notion.site/Notion-Github-225629765d02440fbca6042e5cb93a10"
    },
    {
      "object": "page",
      "id": "a239adaa-a272-4a0f-ab61-7fad7e79f0e5",
      "created_time": "2023-07-30T11:19:00.000Z",
      "last_edited_time": "2023-07-30T16:16:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/74718d04-0c1e-4e9f-abd0-eba81c5fd246/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230730224558.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=e4f15dc00228f5489cbfb0a40c44c2e99cebfaafc49f91cc12edd556aa1afae5&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2023-12-26T16:28:34.578Z"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-07-30 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2307-w5",
        "tags": [],
        "summary": "拍摄于塔子山公园的鸟语林，原来塔子山公园上还隐藏着这么一个小小的鸟类主题动物园，之前逛过几次都没发现，还是在大众点评上看到才无意发现。这只海鸥呆呆的眼神立马让我想起了去码头整点薯条这个梗，真是很适合这呆头呆脑的形象，哈哈。动物园里除了鹦鹉，海鸥，天鹅这些常见的鸟类也有羊驼，梅花鹿，绵羊甚至猪，妥妥的大杂烩。",
        "title": "数字溪流2307-W5",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/81ca5a78-1f59-4d6b-852d-1453d30809f2/74718d04-0c1e-4e9f-abd0-eba81c5fd246/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230730224558.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231226T152834Z&X-Amz-Expires=3600&X-Amz-Signature=e4f15dc00228f5489cbfb0a40c44c2e99cebfaafc49f91cc12edd556aa1afae5&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "a239adaa-a272-4a0f-ab61-7fad7e79f0e5",
        "updated": "2023-07-31 00:16:00"
      },
      "url": "https://www.notion.so/2307-W5-a239adaaa2724a0fab617fad7e79f0e5",
      "public_url": "https://military-albatross-7a9.notion.site/2307-W5-a239adaaa2724a0fab617fad7e79f0e5"
    },
    {
      "object": "page",
      "id": "396270c6-a77e-4a97-992e-e273e0a24892",
      "created_time": "2023-07-25T09:12:00.000Z",
      "last_edited_time": "2023-10-08T09:59:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-08-11 00:00:00",
        "type": "Post",
        "category": "博客记录",
        "slug": "migrate-blog-to-notionnext-from-hugo",
        "tags": [
          "NotionNext",
          "hugo",
          "notion",
          "blog"
        ],
        "summary": "曾经在 一周随笔20230226 这篇博文中描述了下我心目中理想的 Blog 系统，吐槽了下写博文时的一些很不爽的地方，也一直在寻找更好的 Blog 系统。直到无意间发现了 NotionNext，一下就有了哎哟不错喔，这应该就是我想要的博客系统这种感觉。甚至马上就想开始动手迁移我的博客，没有当初从 Hexo 迁移到 Hugo 的时那种纠结。",
        "title": "从 Hugo 迁移到 NotionNext",
        "status": "Published",
        "urlname": "396270c6-a77e-4a97-992e-e273e0a24892",
        "updated": "2023-10-08 17:59:00"
      },
      "url": "https://www.notion.so/Hugo-NotionNext-396270c6a77e4a97992ee273e0a24892",
      "public_url": "https://military-albatross-7a9.notion.site/Hugo-NotionNext-396270c6a77e4a97992ee273e0a24892"
    },
    {
      "object": "page",
      "id": "0178db9b-0fd8-41ed-b27d-0015ae286e79",
      "created_time": "2023-07-23T15:16:00.000Z",
      "last_edited_time": "2023-07-25T15:14:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-07-23 00:00:00",
        "type": "Post",
        "category": "软件工具",
        "slug": "use-keel-auto-update-image-version-in-k8s",
        "tags": [
          "kubernetes",
          "Keel"
        ],
        "summary": "当我们在自己的服务器上使用 Docker 部署了一些有用的容器镜像时，一般可以使用 watchtower 来自动更新我们的镜像版本。但是如果使用的是 K8S，有没有工具可以像 watchtower 一样来自动更新 K8S 中的容器镜像版本呢，最近发现了 Keel 这款工具可以做同样的事。",
        "title": "使用 Keel 自动更新 K8S 中容器镜像",
        "status": "Published",
        "urlname": "0178db9b-0fd8-41ed-b27d-0015ae286e79",
        "updated": "2023-07-25 23:14:00"
      },
      "url": "https://www.notion.so/Keel-K8S-0178db9b0fd841edb27d0015ae286e79",
      "public_url": "https://military-albatross-7a9.notion.site/Keel-K8S-0178db9b0fd841edb27d0015ae286e79"
    },
    {
      "object": "page",
      "id": "5b1cf9e5-6248-4bb5-bd04-87cf89e4c868",
      "created_time": "2023-07-21T10:33:00.000Z",
      "last_edited_time": "2023-07-21T10:36:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-12-08 00:00:00",
        "type": "Post",
        "category": "Golang",
        "slug": "golang-gc-theory",
        "tags": [
          "Golang GC"
        ],
        "summary": "Go 1.5 以后（截止Golang v1.12）采用了非分代、非紧缩、写屏障、三色标记的原理进行垃圾回收。",
        "title": "Golang GC 原理",
        "status": "Published",
        "urlname": "5b1cf9e5-6248-4bb5-bd04-87cf89e4c868",
        "updated": "2023-07-21 18:36:00"
      },
      "url": "https://www.notion.so/Golang-GC-5b1cf9e562484bb5bd0487cf89e4c868",
      "public_url": "https://military-albatross-7a9.notion.site/Golang-GC-5b1cf9e562484bb5bd0487cf89e4c868"
    },
    {
      "object": "page",
      "id": "d749a6fa-bee2-4c5a-a28d-33ba1c9e9d46",
      "created_time": "2023-07-13T09:59:00.000Z",
      "last_edited_time": "2023-07-17T07:12:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2016-10-20 00:00:00",
        "type": "Post",
        "category": "Linux管理",
        "slug": "vi-skills",
        "tags": [],
        "summary": "",
        "title": "Vi使用技巧",
        "status": "Published",
        "urlname": "d749a6fa-bee2-4c5a-a28d-33ba1c9e9d46",
        "updated": "2023-07-17 15:12:00"
      },
      "url": "https://www.notion.so/Vi-d749a6fabee24c5aa28d33ba1c9e9d46",
      "public_url": "https://military-albatross-7a9.notion.site/Vi-d749a6fabee24c5aa28d33ba1c9e9d46"
    },
    {
      "object": "page",
      "id": "0bd4d76f-8ce3-4f7a-9795-ec84b0b7b8ee",
      "created_time": "2023-07-13T09:59:00.000Z",
      "last_edited_time": "2023-07-17T07:13:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2016-11-02 00:00:00",
        "type": "Post",
        "category": "Linux编程",
        "slug": "linux-driven-development-basic-knowledge",
        "tags": [],
        "summary": "",
        "title": "Linux驱动开发基础知识",
        "status": "Published",
        "urlname": "0bd4d76f-8ce3-4f7a-9795-ec84b0b7b8ee",
        "updated": "2023-07-17 15:13:00"
      },
      "url": "https://www.notion.so/Linux-0bd4d76f8ce34f7a9795ec84b0b7b8ee",
      "public_url": "https://military-albatross-7a9.notion.site/Linux-0bd4d76f8ce34f7a9795ec84b0b7b8ee"
    },
    {
      "object": "page",
      "id": "11f072de-5ee2-401b-946c-59daf3f6a1ad",
      "created_time": "2023-07-13T09:59:00.000Z",
      "last_edited_time": "2023-07-17T07:12:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2016-11-08 00:00:00",
        "type": "Post",
        "category": "Python",
        "slug": "py2exe-conversion-parameters",
        "tags": [],
        "summary": "",
        "title": "py2exe转换参数",
        "status": "Published",
        "urlname": "11f072de-5ee2-401b-946c-59daf3f6a1ad",
        "updated": "2023-07-17 15:12:00"
      },
      "url": "https://www.notion.so/py2exe-11f072de5ee2401b946c59daf3f6a1ad",
      "public_url": "https://military-albatross-7a9.notion.site/py2exe-11f072de5ee2401b946c59daf3f6a1ad"
    },
    {
      "object": "page",
      "id": "f772582b-f800-4295-b10e-8f87ffa32d63",
      "created_time": "2023-07-13T09:58:00.000Z",
      "last_edited_time": "2023-07-17T07:12:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2016-12-10 00:00:00",
        "type": "Post",
        "category": "Linux编程",
        "slug": "makefile-common-knowledge-points",
        "tags": [],
        "summary": "",
        "title": "Makefile常用知识点",
        "status": "Published",
        "urlname": "f772582b-f800-4295-b10e-8f87ffa32d63",
        "updated": "2023-07-17 15:12:00"
      },
      "url": "https://www.notion.so/Makefile-f772582bf8004295b10e8f87ffa32d63",
      "public_url": "https://military-albatross-7a9.notion.site/Makefile-f772582bf8004295b10e8f87ffa32d63"
    },
    {
      "object": "page",
      "id": "351382cf-57e4-4fd1-a59b-2e95dc07fd20",
      "created_time": "2023-07-13T09:58:00.000Z",
      "last_edited_time": "2023-07-17T07:11:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2016-12-10 00:00:00",
        "type": "Post",
        "category": "Python",
        "slug": "python-tarfile-module-unzip-invalid-mode-('wb')-or-filename",
        "tags": [],
        "summary": "",
        "title": "Python tarfile模块解压报错 invalid mode ('wb') or filename",
        "status": "Published",
        "urlname": "351382cf-57e4-4fd1-a59b-2e95dc07fd20",
        "updated": "2023-07-17 15:11:00"
      },
      "url": "https://www.notion.so/Python-tarfile-invalid-mode-wb-or-filename-351382cf57e44fd1a59b2e95dc07fd20",
      "public_url": "https://military-albatross-7a9.notion.site/Python-tarfile-invalid-mode-wb-or-filename-351382cf57e44fd1a59b2e95dc07fd20"
    },
    {
      "object": "page",
      "id": "276c3766-5a22-4f6f-8316-f8de676c3a3d",
      "created_time": "2023-07-13T09:58:00.000Z",
      "last_edited_time": "2023-07-17T07:11:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2016-12-10 00:00:00",
        "type": "Post",
        "category": "Python",
        "slug": "python-small-knowledge-point",
        "tags": [],
        "summary": "",
        "title": "python小知识点",
        "status": "Published",
        "urlname": "276c3766-5a22-4f6f-8316-f8de676c3a3d",
        "updated": "2023-07-17 15:11:00"
      },
      "url": "https://www.notion.so/python-276c37665a224f6f8316f8de676c3a3d",
      "public_url": "https://military-albatross-7a9.notion.site/python-276c37665a224f6f8316f8de676c3a3d"
    },
    {
      "object": "page",
      "id": "d6248408-342d-49c8-815f-69ff4076bb79",
      "created_time": "2023-07-13T09:57:00.000Z",
      "last_edited_time": "2023-07-17T07:10:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2016-12-16 00:00:00",
        "type": "Post",
        "category": "Android",
        "slug": "android-activity-lifecycle",
        "tags": [],
        "summary": "",
        "title": "Android活动生命周期",
        "status": "Published",
        "urlname": "d6248408-342d-49c8-815f-69ff4076bb79",
        "updated": "2023-07-17 15:10:00"
      },
      "url": "https://www.notion.so/Android-d6248408342d49c8815f69ff4076bb79",
      "public_url": "https://military-albatross-7a9.notion.site/Android-d6248408342d49c8815f69ff4076bb79"
    },
    {
      "object": "page",
      "id": "4fe27424-e1b9-4e3a-a456-3d9ce383e8b4",
      "created_time": "2023-07-13T09:55:00.000Z",
      "last_edited_time": "2023-07-17T07:10:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-01-22 00:00:00",
        "type": "Post",
        "category": "数据库",
        "slug": "mysql-will-surely-know-notes",
        "tags": [],
        "summary": "",
        "title": "MySQL必知必会笔记",
        "status": "Published",
        "urlname": "4fe27424-e1b9-4e3a-a456-3d9ce383e8b4",
        "updated": "2023-07-17 15:10:00"
      },
      "url": "https://www.notion.so/MySQL-4fe27424e1b94e3aa4563d9ce383e8b4",
      "public_url": "https://military-albatross-7a9.notion.site/MySQL-4fe27424e1b94e3aa4563d9ce383e8b4"
    },
    {
      "object": "page",
      "id": "85d0963c-d167-457f-9e97-19e6477c6d4e",
      "created_time": "2023-07-13T09:54:00.000Z",
      "last_edited_time": "2023-07-17T07:10:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-03-12 00:00:00",
        "type": "Post",
        "category": "Linux管理",
        "slug": "summary-of-shell-writing",
        "tags": [],
        "summary": "",
        "title": "shell编写总结",
        "status": "Published",
        "urlname": "85d0963c-d167-457f-9e97-19e6477c6d4e",
        "updated": "2023-07-17 15:10:00"
      },
      "url": "https://www.notion.so/shell-85d0963cd167457f9e9719e6477c6d4e",
      "public_url": "https://military-albatross-7a9.notion.site/shell-85d0963cd167457f9e9719e6477c6d4e"
    },
    {
      "object": "page",
      "id": "047e10f5-4d9d-4b27-8eb9-8ad26242f40b",
      "created_time": "2023-07-13T09:54:00.000Z",
      "last_edited_time": "2023-07-17T07:10:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-04-09 00:00:00",
        "type": "Post",
        "category": "Django",
        "slug": "design-pattern-of-django",
        "tags": [],
        "summary": "",
        "title": "Django的设计模式",
        "status": "Published",
        "urlname": "047e10f5-4d9d-4b27-8eb9-8ad26242f40b",
        "updated": "2023-07-17 15:10:00"
      },
      "url": "https://www.notion.so/Django-047e10f54d9d4b278eb98ad26242f40b",
      "public_url": "https://military-albatross-7a9.notion.site/Django-047e10f54d9d4b278eb98ad26242f40b"
    },
    {
      "object": "page",
      "id": "7ef338f3-3c3b-4254-9a9b-888ed9d87f4b",
      "created_time": "2023-07-13T09:54:00.000Z",
      "last_edited_time": "2023-07-17T07:09:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-04-09 00:00:00",
        "type": "Post",
        "category": "Django",
        "slug": "django-modelform-modifies-the-default-control-properties",
        "tags": [],
        "summary": "",
        "title": "Django ModelForm修改默认的控件属性",
        "status": "Published",
        "urlname": "7ef338f3-3c3b-4254-9a9b-888ed9d87f4b",
        "updated": "2023-07-17 15:09:00"
      },
      "url": "https://www.notion.so/Django-ModelForm-7ef338f33c3b42549a9b888ed9d87f4b",
      "public_url": "https://military-albatross-7a9.notion.site/Django-ModelForm-7ef338f33c3b42549a9b888ed9d87f4b"
    },
    {
      "object": "page",
      "id": "4531936b-6f90-48a8-8d44-c663f3a660cd",
      "created_time": "2023-07-13T09:53:00.000Z",
      "last_edited_time": "2023-07-17T07:09:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-04-20 00:00:00",
        "type": "Post",
        "category": "Linux管理",
        "slug": "the-configuration-program-becomes-a-linux-service",
        "tags": [],
        "summary": "",
        "title": "配置程序成为Linux服务",
        "status": "Published",
        "urlname": "4531936b-6f90-48a8-8d44-c663f3a660cd",
        "updated": "2023-07-17 15:09:00"
      },
      "url": "https://www.notion.so/Linux-4531936b6f9048a88d44c663f3a660cd",
      "public_url": "https://military-albatross-7a9.notion.site/Linux-4531936b6f9048a88d44c663f3a660cd"
    },
    {
      "object": "page",
      "id": "3703f624-8045-4b58-9dda-216f30a79bcc",
      "created_time": "2023-07-13T09:52:00.000Z",
      "last_edited_time": "2023-07-17T07:08:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-04-27 00:00:00",
        "type": "Post",
        "category": "设计模式",
        "slug": "brief-explanation-of-event-driven-(python-implementation)",
        "tags": [],
        "summary": "",
        "title": "事件驱动的简明讲解(python实现)",
        "status": "Published",
        "urlname": "3703f624-8045-4b58-9dda-216f30a79bcc",
        "updated": "2023-07-17 15:08:00"
      },
      "url": "https://www.notion.so/python-3703f62480454b589dda216f30a79bcc",
      "public_url": "https://military-albatross-7a9.notion.site/python-3703f62480454b589dda216f30a79bcc"
    },
    {
      "object": "page",
      "id": "acdd1a45-2613-49f0-a576-7b6875fe99f8",
      "created_time": "2023-07-13T09:52:00.000Z",
      "last_edited_time": "2023-07-17T07:08:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-05-06 00:00:00",
        "type": "Post",
        "category": "Python",
        "slug": "python-advanced-iterator-and-generator",
        "tags": [],
        "summary": "",
        "title": "Python进阶之迭代器和生成器",
        "status": "Published",
        "urlname": "acdd1a45-2613-49f0-a576-7b6875fe99f8",
        "updated": "2023-07-17 15:08:00"
      },
      "url": "https://www.notion.so/Python-acdd1a45261349f0a5767b6875fe99f8",
      "public_url": "https://military-albatross-7a9.notion.site/Python-acdd1a45261349f0a5767b6875fe99f8"
    },
    {
      "object": "page",
      "id": "c4d4129f-e286-4dbd-a7af-8e824ae2924e",
      "created_time": "2023-07-13T09:51:00.000Z",
      "last_edited_time": "2023-07-17T07:07:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-05-10 00:00:00",
        "type": "Post",
        "category": "Python",
        "slug": "python-advanced-decorator",
        "tags": [],
        "summary": "",
        "title": "Python进阶之装饰器",
        "status": "Published",
        "urlname": "c4d4129f-e286-4dbd-a7af-8e824ae2924e",
        "updated": "2023-07-17 15:07:00"
      },
      "url": "https://www.notion.so/Python-c4d4129fe2864dbda7af8e824ae2924e",
      "public_url": "https://military-albatross-7a9.notion.site/Python-c4d4129fe2864dbda7af8e824ae2924e"
    },
    {
      "object": "page",
      "id": "3cc8b889-069f-4f1c-bbe2-81f03a7ca882",
      "created_time": "2023-07-13T09:50:00.000Z",
      "last_edited_time": "2023-07-17T07:06:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-05-20 00:00:00",
        "type": "Post",
        "category": "Python",
        "slug": "collections-of-the-python-module",
        "tags": [],
        "summary": "",
        "title": "Python模块之Collections",
        "status": "Published",
        "urlname": "3cc8b889-069f-4f1c-bbe2-81f03a7ca882",
        "updated": "2023-07-17 15:06:00"
      },
      "url": "https://www.notion.so/Python-Collections-3cc8b889069f4f1cbbe281f03a7ca882",
      "public_url": "https://military-albatross-7a9.notion.site/Python-Collections-3cc8b889069f4f1cbbe281f03a7ca882"
    },
    {
      "object": "page",
      "id": "adf520da-d2ef-41b2-aa0a-de9c13c87721",
      "created_time": "2023-07-13T09:48:00.000Z",
      "last_edited_time": "2023-07-17T07:04:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-06-02 00:00:00",
        "type": "Post",
        "category": "JavaScript",
        "slug": "javascript-type-comparison",
        "tags": [],
        "summary": "",
        "title": "JavaScript类型比较",
        "status": "Published",
        "urlname": "adf520da-d2ef-41b2-aa0a-de9c13c87721",
        "updated": "2023-07-17 15:04:00"
      },
      "url": "https://www.notion.so/JavaScript-adf520dad2ef41b2aa0ade9c13c87721",
      "public_url": "https://military-albatross-7a9.notion.site/JavaScript-adf520dad2ef41b2aa0ade9c13c87721"
    },
    {
      "object": "page",
      "id": "8810277f-eb6e-41cc-9ff1-022d45838b09",
      "created_time": "2023-07-13T09:48:00.000Z",
      "last_edited_time": "2023-07-17T07:03:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-06-24 00:00:00",
        "type": "Post",
        "category": "JavaScript",
        "slug": "the-basic-concept-of-javascript-closure",
        "tags": [],
        "summary": "",
        "title": "JavaScript闭包基本概念",
        "status": "Published",
        "urlname": "8810277f-eb6e-41cc-9ff1-022d45838b09",
        "updated": "2023-07-17 15:03:00"
      },
      "url": "https://www.notion.so/JavaScript-8810277feb6e41cc9ff1022d45838b09",
      "public_url": "https://military-albatross-7a9.notion.site/JavaScript-8810277feb6e41cc9ff1022d45838b09"
    },
    {
      "object": "page",
      "id": "206a23f7-dc7b-42cb-bff8-fe5cae67b860",
      "created_time": "2023-07-13T09:46:00.000Z",
      "last_edited_time": "2023-07-17T07:01:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-06-24 00:00:00",
        "type": "Post",
        "category": "JavaScript",
        "slug": "javascript-function",
        "tags": [],
        "summary": "",
        "title": "JavaScript 函数",
        "status": "Published",
        "urlname": "206a23f7-dc7b-42cb-bff8-fe5cae67b860",
        "updated": "2023-07-17 15:01:00"
      },
      "url": "https://www.notion.so/JavaScript-206a23f7dc7b42cbbff8fe5cae67b860",
      "public_url": "https://military-albatross-7a9.notion.site/JavaScript-206a23f7dc7b42cbbff8fe5cae67b860"
    },
    {
      "object": "page",
      "id": "a829aa8b-4b63-4436-ad5c-d3d5b121b896",
      "created_time": "2023-07-13T09:46:00.000Z",
      "last_edited_time": "2023-07-17T06:48:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-06-24 00:00:00",
        "type": "Post",
        "category": "Java",
        "slug": "java-io-learning-point-guide",
        "tags": [],
        "summary": "",
        "title": "Java IO学习要点导图",
        "status": "Published",
        "urlname": "a829aa8b-4b63-4436-ad5c-d3d5b121b896",
        "updated": "2023-07-17 14:48:00"
      },
      "url": "https://www.notion.so/Java-IO-a829aa8b4b634436ad5cd3d5b121b896",
      "public_url": "https://military-albatross-7a9.notion.site/Java-IO-a829aa8b4b634436ad5cd3d5b121b896"
    },
    {
      "object": "page",
      "id": "78e26026-8b45-4f5a-8cbf-9426d45f4224",
      "created_time": "2023-07-13T09:45:00.000Z",
      "last_edited_time": "2023-07-17T06:47:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-06-24 00:00:00",
        "type": "Post",
        "category": "Java",
        "slug": "the-class-object-of-the-thinking-mapping-java",
        "tags": [],
        "summary": "",
        "title": "思维导图学Java之Class对象",
        "status": "Published",
        "urlname": "78e26026-8b45-4f5a-8cbf-9426d45f4224",
        "updated": "2023-07-17 14:47:00"
      },
      "url": "https://www.notion.so/Java-Class-78e260268b454f5a8cbf9426d45f4224",
      "public_url": "https://military-albatross-7a9.notion.site/Java-Class-78e260268b454f5a8cbf9426d45f4224"
    },
    {
      "object": "page",
      "id": "f591f5a7-df0d-4077-a51e-615be25c7d01",
      "created_time": "2023-07-13T09:45:00.000Z",
      "last_edited_time": "2023-07-17T06:47:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-07-12 00:00:00",
        "type": "Post",
        "category": "JavaScript",
        "slug": "es6-scope-and-deconstruction-assignment",
        "tags": [],
        "summary": "",
        "title": "ES6作用域和解构赋值",
        "status": "Published",
        "urlname": "f591f5a7-df0d-4077-a51e-615be25c7d01",
        "updated": "2023-07-17 14:47:00"
      },
      "url": "https://www.notion.so/ES6-f591f5a7df0d4077a51e615be25c7d01",
      "public_url": "https://military-albatross-7a9.notion.site/ES6-f591f5a7df0d4077a51e615be25c7d01"
    },
    {
      "object": "page",
      "id": "90c1b6ff-c63d-47e6-aa1d-38f0b8ae3356",
      "created_time": "2023-07-13T09:42:00.000Z",
      "last_edited_time": "2023-07-17T06:45:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-09-24 00:00:00",
        "type": "Post",
        "category": "设计模式",
        "slug": "notes-on-the-design-pattern-of-big-talk",
        "tags": [],
        "summary": "",
        "title": "大话设计模式 笔记",
        "status": "Published",
        "urlname": "90c1b6ff-c63d-47e6-aa1d-38f0b8ae3356",
        "updated": "2023-07-17 14:45:00"
      },
      "url": "https://www.notion.so/90c1b6ffc63d47e6aa1d38f0b8ae3356",
      "public_url": "https://military-albatross-7a9.notion.site/90c1b6ffc63d47e6aa1d38f0b8ae3356"
    },
    {
      "object": "page",
      "id": "b8f82bfa-8109-409c-bb6a-ad69dd5e25cd",
      "created_time": "2023-07-13T09:41:00.000Z",
      "last_edited_time": "2023-07-17T06:45:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-09-25 00:00:00",
        "type": "Post",
        "category": "cpp",
        "slug": "cpp11-new-knowledge-point",
        "tags": [],
        "summary": "",
        "title": "C++11 新知识点",
        "status": "Published",
        "urlname": "b8f82bfa-8109-409c-bb6a-ad69dd5e25cd",
        "updated": "2023-07-17 14:45:00"
      },
      "url": "https://www.notion.so/C-11-b8f82bfa8109409cbb6aad69dd5e25cd",
      "public_url": "https://military-albatross-7a9.notion.site/C-11-b8f82bfa8109409cbb6aad69dd5e25cd"
    },
    {
      "object": "page",
      "id": "39808486-176b-44d2-9277-48a36682cc92",
      "created_time": "2023-07-13T09:41:00.000Z",
      "last_edited_time": "2023-07-17T06:43:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-12-29 00:00:00",
        "type": "Post",
        "category": "Linux管理",
        "slug": "shell-edit-the-crontab-task",
        "tags": [],
        "summary": "",
        "title": "shell编辑crontab任务",
        "status": "Published",
        "urlname": "39808486-176b-44d2-9277-48a36682cc92",
        "updated": "2023-07-17 14:43:00"
      },
      "url": "https://www.notion.so/shell-crontab-39808486176b44d2927748a36682cc92",
      "public_url": "https://military-albatross-7a9.notion.site/shell-crontab-39808486176b44d2927748a36682cc92"
    },
    {
      "object": "page",
      "id": "9b07d1c7-14d8-4348-a464-07e07e50bb64",
      "created_time": "2023-07-13T09:38:00.000Z",
      "last_edited_time": "2023-07-17T07:13:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2017-12-29 00:00:00",
        "type": "Post",
        "category": "Linux管理",
        "slug": "linux-common-commands",
        "tags": [
          "Linux命令"
        ],
        "summary": "",
        "title": "Linux常用命令",
        "status": "Published",
        "urlname": "9b07d1c7-14d8-4348-a464-07e07e50bb64",
        "updated": "2023-07-17 15:13:00"
      },
      "url": "https://www.notion.so/Linux-9b07d1c714d84348a46407e07e50bb64",
      "public_url": "https://military-albatross-7a9.notion.site/Linux-9b07d1c714d84348a46407e07e50bb64"
    },
    {
      "object": "page",
      "id": "961c038c-8f49-478d-8c61-68f679680da0",
      "created_time": "2023-07-13T09:38:00.000Z",
      "last_edited_time": "2023-07-17T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2018-01-04 00:00:00",
        "type": "Post",
        "category": "Python",
        "slug": "virtualenvwrapper-of-the-python-module",
        "tags": [],
        "summary": "",
        "title": "Python模块之virtualenvwrapper",
        "status": "Published",
        "urlname": "961c038c-8f49-478d-8c61-68f679680da0",
        "updated": "2023-07-17 14:42:00"
      },
      "url": "https://www.notion.so/Python-virtualenvwrapper-961c038c8f49478d8c6168f679680da0",
      "public_url": "https://military-albatross-7a9.notion.site/Python-virtualenvwrapper-961c038c8f49478d8c6168f679680da0"
    },
    {
      "object": "page",
      "id": "fe690171-3af8-4967-993b-825f5a1cd525",
      "created_time": "2023-07-13T09:37:00.000Z",
      "last_edited_time": "2023-07-17T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2018-01-23 00:00:00",
        "type": "Post",
        "category": "Django",
        "slug": "django-hides-the-primary-key-id-in-the-database-with-hash",
        "tags": [],
        "summary": "",
        "title": "Django 用散列隐藏数据库中主键ID",
        "status": "Published",
        "urlname": "fe690171-3af8-4967-993b-825f5a1cd525",
        "updated": "2023-07-17 14:42:00"
      },
      "url": "https://www.notion.so/Django-ID-fe6901713af84967993b825f5a1cd525",
      "public_url": "https://military-albatross-7a9.notion.site/Django-ID-fe6901713af84967993b825f5a1cd525"
    },
    {
      "object": "page",
      "id": "3718ed3c-f70f-43ac-8eb2-51487ab5922c",
      "created_time": "2023-07-13T09:37:00.000Z",
      "last_edited_time": "2023-07-17T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2018-03-17 00:00:00",
        "type": "Post",
        "category": "Docker",
        "slug": "running-crontab-in-docker",
        "tags": [],
        "summary": "",
        "title": "在Docker中运行crontab",
        "status": "Published",
        "urlname": "3718ed3c-f70f-43ac-8eb2-51487ab5922c",
        "updated": "2023-07-17 14:42:00"
      },
      "url": "https://www.notion.so/Docker-crontab-3718ed3cf70f43ac8eb251487ab5922c",
      "public_url": "https://military-albatross-7a9.notion.site/Docker-crontab-3718ed3cf70f43ac8eb251487ab5922c"
    },
    {
      "object": "page",
      "id": "f816711b-a712-4265-ade5-63fe1cc26c9f",
      "created_time": "2023-07-13T09:36:00.000Z",
      "last_edited_time": "2023-07-17T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2018-04-05 00:00:00",
        "type": "Post",
        "category": "数据库",
        "slug": "mysql-config-adjust",
        "tags": [
          "MySQL配置"
        ],
        "summary": "",
        "title": "MySQL 配置优化",
        "status": "Published",
        "urlname": "f816711b-a712-4265-ade5-63fe1cc26c9f",
        "updated": "2023-07-17 14:42:00"
      },
      "url": "https://www.notion.so/MySQL-f816711ba7124265ade563fe1cc26c9f",
      "public_url": "https://military-albatross-7a9.notion.site/MySQL-f816711ba7124265ade563fe1cc26c9f"
    },
    {
      "object": "page",
      "id": "84c953d6-d1f7-40c0-b9b0-116ff39f2132",
      "created_time": "2023-07-13T09:35:00.000Z",
      "last_edited_time": "2023-07-17T06:41:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2018-06-13 00:00:00",
        "type": "Post",
        "category": "Python",
        "slug": "numpy-basic-usage",
        "tags": [
          "Python模块包",
          "Numpy",
          "科学计算",
          "数据分析"
        ],
        "summary": "",
        "title": "NumPy 基础用法",
        "status": "Published",
        "urlname": "84c953d6-d1f7-40c0-b9b0-116ff39f2132",
        "updated": "2023-07-17 14:41:00"
      },
      "url": "https://www.notion.so/NumPy-84c953d6d1f740c0b9b0116ff39f2132",
      "public_url": "https://military-albatross-7a9.notion.site/NumPy-84c953d6d1f740c0b9b0116ff39f2132"
    },
    {
      "object": "page",
      "id": "3009bc34-4eb9-4513-a0a9-fba6db5329c9",
      "created_time": "2023-07-13T09:33:00.000Z",
      "last_edited_time": "2023-07-17T06:41:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2018-07-24 00:00:00",
        "type": "Post",
        "category": "Python",
        "slug": "pandas-basic-usage",
        "tags": [
          "Python模块包",
          "Pandas",
          "科学计算",
          "数据分析"
        ],
        "summary": "",
        "title": "Pandas 基础用法",
        "status": "Published",
        "urlname": "3009bc34-4eb9-4513-a0a9-fba6db5329c9",
        "updated": "2023-07-17 14:41:00"
      },
      "url": "https://www.notion.so/Pandas-3009bc344eb94513a0a9fba6db5329c9",
      "public_url": "https://military-albatross-7a9.notion.site/Pandas-3009bc344eb94513a0a9fba6db5329c9"
    },
    {
      "object": "page",
      "id": "a9ab7bf6-f568-4e0a-8f97-639be1acacf5",
      "created_time": "2023-07-13T09:32:00.000Z",
      "last_edited_time": "2023-07-17T06:41:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2018-09-11 00:00:00",
        "type": "Post",
        "category": "数据库",
        "slug": "sometimes-useful-mysql-skill",
        "tags": [
          "MySQL技巧"
        ],
        "summary": "",
        "title": "偶尔用得上的MySQL操作",
        "status": "Published",
        "urlname": "a9ab7bf6-f568-4e0a-8f97-639be1acacf5",
        "updated": "2023-07-17 14:41:00"
      },
      "url": "https://www.notion.so/MySQL-a9ab7bf6f5684e0a8f97639be1acacf5",
      "public_url": "https://military-albatross-7a9.notion.site/MySQL-a9ab7bf6f5684e0a8f97639be1acacf5"
    },
    {
      "object": "page",
      "id": "bbe13887-7af7-4399-ba5e-d1b08398fa9a",
      "created_time": "2023-07-13T09:32:00.000Z",
      "last_edited_time": "2023-07-17T06:41:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2018-09-27 00:00:00",
        "type": "Post",
        "category": "Python",
        "slug": "python-build-in-function",
        "tags": [
          "Python基础知识"
        ],
        "summary": "",
        "title": "Python 内置方法",
        "status": "Published",
        "urlname": "bbe13887-7af7-4399-ba5e-d1b08398fa9a",
        "updated": "2023-07-17 14:41:00"
      },
      "url": "https://www.notion.so/Python-bbe138877af74399ba5ed1b08398fa9a",
      "public_url": "https://military-albatross-7a9.notion.site/Python-bbe138877af74399ba5ed1b08398fa9a"
    },
    {
      "object": "page",
      "id": "c0c57fa4-044c-4f50-8199-9f12724853ee",
      "created_time": "2023-07-13T09:30:00.000Z",
      "last_edited_time": "2023-07-17T06:40:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2018-11-30 00:00:00",
        "type": "Post",
        "category": "算法",
        "slug": "algorithm-with-leetcode",
        "tags": [
          "Python",
          "Go",
          "leetcode"
        ],
        "summary": "leetcode 算法刷题记录和总结, 主要使用Python和Go来作答.",
        "title": "leetcode 算法刷题记录",
        "status": "Published",
        "urlname": "c0c57fa4-044c-4f50-8199-9f12724853ee",
        "updated": "2023-07-17 14:40:00"
      },
      "url": "https://www.notion.so/leetcode-c0c57fa4044c4f5081999f12724853ee",
      "public_url": "https://military-albatross-7a9.notion.site/leetcode-c0c57fa4044c4f5081999f12724853ee"
    },
    {
      "object": "page",
      "id": "8a90fccd-b953-4c11-b81f-ef8fc113aa17",
      "created_time": "2023-07-13T09:30:00.000Z",
      "last_edited_time": "2023-07-17T06:38:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2019-01-31 00:00:00",
        "type": "Post",
        "category": "Golang",
        "slug": "go-base-knowledge",
        "tags": [
          "Golang 基础"
        ],
        "summary": "已经专职做了很久的 Python 开发，不过心中对当初带我入行 C 也一直有些留恋。Go 语言的设计和定位和 C 语言有很多共同之处，也融入了很多现代的设计理念，写起来很有当初写 C 的亲切感。准备好好学习下这门语言，这里记录下一些个人觉得重要的基础知识点，随着不断深入再补充。",
        "title": "Go 基础知识点",
        "status": "Published",
        "urlname": "8a90fccd-b953-4c11-b81f-ef8fc113aa17",
        "updated": "2023-07-17 14:38:00"
      },
      "url": "https://www.notion.so/Go-8a90fccdb9534c11b81fef8fc113aa17",
      "public_url": "https://military-albatross-7a9.notion.site/Go-8a90fccdb9534c11b81fef8fc113aa17"
    },
    {
      "object": "page",
      "id": "15201ca9-e4bc-47e1-9a7e-08bf84a85d4e",
      "created_time": "2023-07-13T09:29:00.000Z",
      "last_edited_time": "2023-07-17T06:33:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2019-06-19 00:00:00",
        "type": "Post",
        "category": "项目架构",
        "slug": "first-exploration-of-mirco-service",
        "tags": [
          "mircoservices",
          "Go",
          "go-mirco"
        ],
        "summary": "日常工作中一直在用 Django 这类 MVC 架构的框架来搭建后台。然而早已对微服务架构闻名已久，早想有机会实践一下，靠着搜索引擎找到这篇不错的教程：Golang 微服务教程，总结了微服务开发、测试到部署的完整过程。跟着初步实践了下微服务的构建过程，过了下微服务的瘾，在这里总结下。",
        "title": "初探微服务",
        "status": "Published",
        "urlname": "15201ca9-e4bc-47e1-9a7e-08bf84a85d4e",
        "updated": "2023-07-17 14:33:00"
      },
      "url": "https://www.notion.so/15201ca9e4bc47e19a7e08bf84a85d4e",
      "public_url": "https://military-albatross-7a9.notion.site/15201ca9e4bc47e19a7e08bf84a85d4e"
    },
    {
      "object": "page",
      "id": "aee256a0-e9d4-45bb-889d-1bca9f2c8251",
      "created_time": "2023-07-13T09:27:00.000Z",
      "last_edited_time": "2023-07-17T06:33:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2019-09-01 00:00:00",
        "type": "Post",
        "category": "项目架构",
        "slug": "seckill-backend-system-base-on-go-micro",
        "tags": [
          "mircoservices",
          "go-mirco",
          "秒杀系统"
        ],
        "summary": "前段时间了解到了Go-micro这一微服务开发框架，并基于此框架的教程搭建了一套码头货运管理微服务系统。这次使用Micro来设计和实现了一套更接地气的秒杀系统。\n\n对于秒杀，以及抽奖、抢红包这类系统的最大特点便是在某个时间点会瞬间涌入大量的用户，给系统造成瞬间高于平时千百倍的并发压力。针对这样的特点在设计微服务时就需要考虑一系列的措施来保障系统在高并发场景时可以稳定运行。\n\n完整代码地址",
        "title": "基于Go-micro微服务的秒杀系统",
        "status": "Published",
        "urlname": "aee256a0-e9d4-45bb-889d-1bca9f2c8251",
        "updated": "2023-07-17 14:33:00"
      },
      "url": "https://www.notion.so/Go-micro-aee256a0e9d445bb889d1bca9f2c8251",
      "public_url": "https://military-albatross-7a9.notion.site/Go-micro-aee256a0e9d445bb889d1bca9f2c8251"
    },
    {
      "object": "page",
      "id": "8456f952-9d1d-4ebd-8a23-542c69ba7d68",
      "created_time": "2023-07-13T09:26:00.000Z",
      "last_edited_time": "2023-07-17T06:32:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2019-12-18 00:00:00",
        "type": "Post",
        "category": "项目架构",
        "slug": "use-gin-and-websocket-to-play-rtsp-video",
        "tags": [
          "Gin",
          "WebSocket",
          "RTSP",
          "Go"
        ],
        "summary": "项目地址：gin-rtsp\n\n在后台的开发中遇到了对接显示摄像头视频流的需求。目前获取海康及大华等主流的摄像头的视频流使用的基本都是RTSP协议。不过HTML页面并不能直接播放RTSP协议的视频流，查询了一番各种网页播放RTSP的资料，有如下的一些方案：",
        "title": "使用Gin+WebSocket在HTML中无插件播放RTSP",
        "status": "Published",
        "urlname": "8456f952-9d1d-4ebd-8a23-542c69ba7d68",
        "updated": "2023-07-17 14:32:00"
      },
      "url": "https://www.notion.so/Gin-WebSocket-HTML-RTSP-8456f9529d1d4ebd8a23542c69ba7d68",
      "public_url": "https://military-albatross-7a9.notion.site/Gin-WebSocket-HTML-RTSP-8456f9529d1d4ebd8a23542c69ba7d68"
    },
    {
      "object": "page",
      "id": "0498bc63-4538-4d18-94f2-6edf9b92f43f",
      "created_time": "2023-07-13T09:22:00.000Z",
      "last_edited_time": "2023-07-18T16:05:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-01-01 00:00:00",
        "type": "Post",
        "category": "Golang",
        "slug": "golang-scheduler",
        "tags": [
          "Golang 底层",
          "Golang scheduler"
        ],
        "summary": "转载至 https://www.cnblogs.com/qcrao-2018/p/11442998.html, 一篇很不错讲解 Golang scheduler 的文章。\n\n在 Go 语言里，go func 是并发的单元，chan 是协调并发单元的机制，panic 和 recover 是出错处理的机制，而 defer 是神来之笔，大大简化了出错的管理。\n\nGoroutines 在同一个用户空间里同时独立执行 functions，channels 则用于 goroutines 间的通信和同步访问控制。",
        "title": "[转载]深度解密Go语言之 scheduler",
        "status": "Published",
        "urlname": "0498bc63-4538-4d18-94f2-6edf9b92f43f",
        "updated": "2023-07-19 00:05:00"
      },
      "url": "https://www.notion.so/Go-scheduler-0498bc6345384d1894f26edf9b92f43f",
      "public_url": "https://military-albatross-7a9.notion.site/Go-scheduler-0498bc6345384d1894f26edf9b92f43f"
    },
    {
      "object": "page",
      "id": "0274ac91-4d69-4aa4-9fc2-4acdc6c306c8",
      "created_time": "2023-07-13T09:20:00.000Z",
      "last_edited_time": "2023-07-17T03:31:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-02-10 00:00:00",
        "type": "Post",
        "category": "项目架构",
        "slug": "build-devops-project",
        "tags": [
          "devOps",
          "Jenkins",
          "kubernetes",
          "Gin"
        ],
        "summary": "在后端的开发领域，各类开发框架都已经很多，在开发项目时可以根据不同的需要和需求选择合适的开发框架。然而在需要开发一个完善的工程化项目时，仅仅一个后端开发框架是不够的，还面临着在对开发项目的快速迭代中进行测试，部署，监控等问题。为了解决这些问题，DevOps的开发模式应运而生。\n\n基于个人对DevOps的理解，搭建了一个基于Gin的开源后端项目来实践下DevOps的各个概念：https://github.com/wanghaoxi3000/advproject。\n\nDevOps是一个宽泛的概念，这个项目也只是抛砖引玉，在测试环境下串联起各个DevOps的基础工具，存在的不足欢迎指出，一起学习和交流。",
        "title": "搭建DevOps模式的项目",
        "status": "Published",
        "urlname": "0274ac91-4d69-4aa4-9fc2-4acdc6c306c8",
        "updated": "2023-07-17 11:31:00"
      },
      "url": "https://www.notion.so/DevOps-0274ac914d694aa49fc24acdc6c306c8",
      "public_url": "https://military-albatross-7a9.notion.site/DevOps-0274ac914d694aa49fc24acdc6c306c8"
    },
    {
      "object": "page",
      "id": "dbd2a274-4236-478d-9324-880043009ccd",
      "created_time": "2023-07-13T09:20:00.000Z",
      "last_edited_time": "2023-07-17T03:30:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-06-16 00:00:00",
        "type": "Post",
        "category": "Linux管理",
        "slug": "source-mirrors-change",
        "tags": [
          "mirror",
          "镜像源"
        ],
        "summary": "国内的网络问题，经常需要替换软件本身的更新源，加快软件的下载速度。这里记录下常用国内镜像源。",
        "title": "国内镜像源",
        "status": "Published",
        "urlname": "dbd2a274-4236-478d-9324-880043009ccd",
        "updated": "2023-07-17 11:30:00"
      },
      "url": "https://www.notion.so/dbd2a2744236478d9324880043009ccd",
      "public_url": "https://military-albatross-7a9.notion.site/dbd2a2744236478d9324880043009ccd"
    },
    {
      "object": "page",
      "id": "de496bfb-9b9d-4b57-8faa-d40e479c7d41",
      "created_time": "2023-07-13T09:20:00.000Z",
      "last_edited_time": "2023-07-17T03:29:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-06-23 00:00:00",
        "type": "Post",
        "category": "Golang",
        "slug": "the-value-type-struct-of-map-cannot-assign",
        "tags": [
          "Golang 基础"
        ],
        "summary": "在Golang中，当一个map的value为一个值类型的结构体时，是不能对其赋值的，修改结构体的数值的。",
        "title": "map中值类型结构体无法赋值",
        "status": "Published",
        "urlname": "de496bfb-9b9d-4b57-8faa-d40e479c7d41",
        "updated": "2023-07-17 11:29:00"
      },
      "url": "https://www.notion.so/map-de496bfb9b9d4b578faad40e479c7d41",
      "public_url": "https://military-albatross-7a9.notion.site/map-de496bfb9b9d4b578faad40e479c7d41"
    },
    {
      "object": "page",
      "id": "edb82b59-31b5-4fd6-bcd6-7fe3b8050d39",
      "created_time": "2023-07-13T09:20:00.000Z",
      "last_edited_time": "2023-07-17T03:28:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-09-16 00:00:00",
        "type": "Post",
        "category": "Golang",
        "slug": "type-declarations-and-type-aliases",
        "tags": [
          "Golang 基础"
        ],
        "summary": "Golang 语言中，我们可以用关键字type声明自定义的各种类型。在使用type时，声明的自定义类型有不同的区别。",
        "title": "别名和类型再定义",
        "status": "Published",
        "urlname": "edb82b59-31b5-4fd6-bcd6-7fe3b8050d39",
        "updated": "2023-07-17 11:28:00"
      },
      "url": "https://www.notion.so/edb82b5931b54fd6bcd67fe3b8050d39",
      "public_url": "https://military-albatross-7a9.notion.site/edb82b5931b54fd6bcd67fe3b8050d39"
    },
    {
      "object": "page",
      "id": "5254d509-659c-488c-9fc6-28b07901dd5d",
      "created_time": "2023-07-13T09:19:00.000Z",
      "last_edited_time": "2023-07-17T03:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-10-01 00:00:00",
        "type": "Post",
        "category": "Golang",
        "slug": "run-goroutine-by-ordered",
        "tags": [
          "Golang 基础"
        ],
        "summary": "Golang 中 goroutine 中的运行是无序的，如果要让多个 goroutine 顺序执行，例如每个 goroutine 在并行执行时顺序打印 0-9，这里记录一种通过 atomic 包的原子操作来实现的方法。",
        "title": "多个goroutine按既定顺序运行",
        "status": "Published",
        "urlname": "5254d509-659c-488c-9fc6-28b07901dd5d",
        "updated": "2023-07-17 11:24:00"
      },
      "url": "https://www.notion.so/goroutine-5254d509659c488c9fc628b07901dd5d",
      "public_url": "https://military-albatross-7a9.notion.site/goroutine-5254d509659c488c9fc628b07901dd5d"
    },
    {
      "object": "page",
      "id": "ba9c45bd-1568-4097-a5b4-e64168d3755d",
      "created_time": "2023-07-13T09:19:00.000Z",
      "last_edited_time": "2023-07-17T03:23:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-10-13 00:00:00",
        "type": "Post",
        "category": "Golang",
        "slug": "the-difference-of-range-array-and-slice",
        "tags": [
          "Golang 基础"
        ],
        "summary": "Go 语言的 range 表达式遵循如下两个规则：\nrange表达式只会在for语句开始执行时被求值一次，无论后边会有多少次迭代\nrange表达式的求值结果会被复制，也就是说，被迭代的对象是range表达式结果值的副本而不是原值",
        "title": "range 数组和切片的差异",
        "status": "Published",
        "urlname": "ba9c45bd-1568-4097-a5b4-e64168d3755d",
        "updated": "2023-07-17 11:23:00"
      },
      "url": "https://www.notion.so/range-ba9c45bd15684097a5b4e64168d3755d",
      "public_url": "https://military-albatross-7a9.notion.site/range-ba9c45bd15684097a5b4e64168d3755d"
    },
    {
      "object": "page",
      "id": "8b9502d4-ae75-4a48-a9d4-081be28a8d4a",
      "created_time": "2023-07-13T09:18:00.000Z",
      "last_edited_time": "2023-07-17T03:20:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-11-25 00:00:00",
        "type": "Post",
        "category": "Golang",
        "slug": "go-advance-summary",
        "tags": [
          "Golang 基础"
        ],
        "summary": "看完了 go-advice, 记录下一些要点和自己值得注意的地方。",
        "title": "Go-Advance 总结",
        "status": "Published",
        "urlname": "8b9502d4-ae75-4a48-a9d4-081be28a8d4a",
        "updated": "2023-07-17 11:20:00"
      },
      "url": "https://www.notion.so/Go-Advance-8b9502d4ae754a48a9d4081be28a8d4a",
      "public_url": "https://military-albatross-7a9.notion.site/Go-Advance-8b9502d4ae754a48a9d4081be28a8d4a"
    },
    {
      "object": "page",
      "id": "a13b76fb-7fff-4fb9-9cc6-f9ed602cf3fc",
      "created_time": "2023-07-13T09:18:00.000Z",
      "last_edited_time": "2023-07-14T03:04:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-04-18 00:00:00",
        "type": "Post",
        "category": "kafka",
        "slug": "kafka-study-note--deploy-kafka-test-env-in-k8s",
        "tags": [
          "kafka",
          "k8s"
        ],
        "summary": "准备深入的学习下kafka，先从搭建一个开发环境，编写一个简单的测试程序开始吧。",
        "title": "kafka学习笔记-搭建基于k8s的kafka测试环境",
        "status": "Published",
        "urlname": "a13b76fb-7fff-4fb9-9cc6-f9ed602cf3fc",
        "updated": "2023-07-14 11:04:00"
      },
      "url": "https://www.notion.so/kafka-k8s-kafka-a13b76fb7fff4fb99cc6f9ed602cf3fc",
      "public_url": "https://military-albatross-7a9.notion.site/kafka-k8s-kafka-a13b76fb7fff4fb99cc6f9ed602cf3fc"
    },
    {
      "object": "page",
      "id": "c2c92a3e-f090-44de-a28e-12cb3fff3c20",
      "created_time": "2023-07-13T09:17:00.000Z",
      "last_edited_time": "2023-07-14T03:03:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-05-11 00:00:00",
        "type": "Post",
        "category": "kafka",
        "slug": "kafka--kafka-study-note--kafka-term",
        "tags": [
          "kafka"
        ],
        "summary": "",
        "title": "kafka学习笔记-kafka术语介绍",
        "status": "Published",
        "urlname": "c2c92a3e-f090-44de-a28e-12cb3fff3c20",
        "updated": "2023-07-14 11:03:00"
      },
      "url": "https://www.notion.so/kafka-kafka-c2c92a3ef09044dea28e12cb3fff3c20",
      "public_url": "https://military-albatross-7a9.notion.site/kafka-kafka-c2c92a3ef09044dea28e12cb3fff3c20"
    },
    {
      "object": "page",
      "id": "8fa8898a-3851-4346-8e67-8d17aa5430f5",
      "created_time": "2023-07-13T08:50:00.000Z",
      "last_edited_time": "2023-07-14T02:59:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-02-27 00:00:00",
        "type": "Post",
        "category": "Golang",
        "slug": "the-design-and-implement-of-golang-malloc",
        "tags": [
          "Golang 原理"
        ],
        "summary": "原文链接 https://mp.weixin.qq.com/s/TO_lmlFbVDgFmns9s_mMzw\n\n程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包含两个重要区域 — 栈区（Stack）和堆区（Heap）。函数调用的参数、返回值以及局部变量大都会被分配到栈上，这部分内存会由编译器进行管理；不同编程语言使用不同的方法管理堆区的内存，C++ 等编程语言会由工程师主动申请和释放内存，Go 以及 Java 等编程语言会由工程师和编译器共同管理，堆中的对象由内存分配器分配并由垃圾收集器回收。\n\n不同的编程语言会选择不同的方式管理内存，本节会介绍 Go 语言内存分配器，详细分析内存分配的过程以及其背后的设计与实现原理。",
        "title": "Go 内存分配器的设计与实现[转载]",
        "status": "Published",
        "urlname": "8fa8898a-3851-4346-8e67-8d17aa5430f5",
        "updated": "2023-07-14 10:59:00"
      },
      "url": "https://www.notion.so/Go-8fa8898a385143468e678d17aa5430f5",
      "public_url": "https://military-albatross-7a9.notion.site/Go-8fa8898a385143468e678d17aa5430f5"
    },
    {
      "object": "page",
      "id": "6962857b-5906-4f7e-825a-d671e2b403e7",
      "created_time": "2023-07-13T08:43:00.000Z",
      "last_edited_time": "2023-07-14T02:21:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-09-25 00:00:00",
        "type": "Post",
        "category": "Golang",
        "slug": "golang-memory-escape",
        "tags": [
          "Golang 原理"
        ],
        "summary": "什么是内存逃逸在一段程序中，每一个函数都会有自己的内存区域存放自己的局部变量、返回地址等，这些内存会由编译器在栈中进行分配，每一个函数都会分配一个栈桢，在函数运行结束后进行销毁，但是有些变量我们想在函数运行结束后仍然使用它，那么就需要把这个变量在堆上分配，这种从\"栈\"上逃逸到\"堆\"上的现象就成为内存逃逸。",
        "title": "Golang 内存逃逸",
        "status": "Published",
        "urlname": "6962857b-5906-4f7e-825a-d671e2b403e7",
        "updated": "2023-07-14 10:21:00"
      },
      "url": "https://www.notion.so/Golang-6962857b59064f7e825ad671e2b403e7",
      "public_url": "https://military-albatross-7a9.notion.site/Golang-6962857b59064f7e825ad671e2b403e7"
    },
    {
      "object": "page",
      "id": "8bdaf8a0-13cb-4050-9ba2-9775024c9cc9",
      "created_time": "2023-07-13T08:41:00.000Z",
      "last_edited_time": "2023-07-14T02:10:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-10-30 00:00:00",
        "type": "Post",
        "category": "项目架构",
        "slug": "talk-about-load-blance-by-bilibili-crash-on-220713",
        "tags": [
          "Load Blance",
          "kubernetes"
        ],
        "summary": "前段时间看了B站发的20210713网站崩溃事件 的总结分析。小破站崩掉的具体原因已在文章做了详细的分析，就不在这里做详谈了，而是总结下文章多次提及了七层SLB、四层LB相关的 Load Balance 负载均衡知识点。",
        "title": "由B站210713崩溃事件聊聊负载均衡",
        "status": "Published",
        "urlname": "8bdaf8a0-13cb-4050-9ba2-9775024c9cc9",
        "updated": "2023-07-14 10:10:00"
      },
      "url": "https://www.notion.so/B-210713-8bdaf8a013cb40509ba29775024c9cc9",
      "public_url": "https://military-albatross-7a9.notion.site/B-210713-8bdaf8a013cb40509ba29775024c9cc9"
    },
    {
      "object": "page",
      "id": "64eee45b-1c09-4042-99bb-97164e113a1d",
      "created_time": "2023-07-13T06:15:00.000Z",
      "last_edited_time": "2023-11-21T15:45:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2018-08-23 00:00:00",
        "type": "Post",
        "category": "软件工具",
        "slug": "sometimes-useful-git-skill",
        "tags": [
          "Git"
        ],
        "summary": "",
        "title": "偶尔用得上的 Git 操作",
        "status": "Published",
        "urlname": "64eee45b-1c09-4042-99bb-97164e113a1d",
        "updated": "2023-11-21 23:45:00"
      },
      "url": "https://www.notion.so/Git-64eee45b1c09404299bb97164e113a1d",
      "public_url": "https://military-albatross-7a9.notion.site/Git-64eee45b1c09404299bb97164e113a1d"
    },
    {
      "object": "page",
      "id": "aaf7e84f-1b4d-44f6-a833-8e1e158edae9",
      "created_time": "2023-07-13T06:13:00.000Z",
      "last_edited_time": "2023-07-17T09:08:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2019-01-03 00:00:00",
        "type": "Post",
        "category": "软件工具",
        "slug": "manage-hexo-theme-with-git-submodules",
        "tags": [
          "Git"
        ],
        "summary": "hexo 中有着丰富的主题可以选择, 大部分的使用示例或者教程都是将主题 clone 到 theme 文件夹中来使用. 但这样来使用主题会存在如下的问题:\n- theme 中的主题属于一个独立的 Git 项目, 有自己的 .git 项目文件夹, 提交 hexo 项目时默认不会提交 theme 的 .git 文件夹, 在其他电脑上 clone 后会失去 theme 原本的版本控制功能.\n- 使用自己修改的主题时, 每次更改完主题, 需要在主题文件夹中提交一次, 然后再在 hexo 项目根文件夹中提交一次, 会产生两次修改内容一样的提交, 不够优雅.\n还好万能的 Git 针对这种问题已经有了成熟的解决方案, 通过自带的 Git submodules 功能即可优雅的避免以上的问题.",
        "title": "在 hexo 中使用 git submodules 管理主题",
        "status": "Published",
        "urlname": "aaf7e84f-1b4d-44f6-a833-8e1e158edae9",
        "updated": "2023-07-17 17:08:00"
      },
      "url": "https://www.notion.so/hexo-git-submodules-aaf7e84f1b4d44f6a8338e1e158edae9",
      "public_url": "https://military-albatross-7a9.notion.site/hexo-git-submodules-aaf7e84f1b4d44f6a8338e1e158edae9"
    },
    {
      "object": "page",
      "id": "88579025-d6b7-43ae-98bb-12b52f90bcd9",
      "created_time": "2023-07-13T06:10:00.000Z",
      "last_edited_time": "2023-07-13T06:14:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2019-01-13 00:00:00",
        "type": "Post",
        "category": "软件工具",
        "slug": "versatility-uwsgi-config",
        "tags": [
          "Python",
          "nginx"
        ],
        "summary": "在进行 Python web 开发时，使用 Django、Flask 等框架开发完毕后，部署时通常需要选择一个支持 wsgi 协议的 Web 服务器程序。目前比较通用的选择是 nginx + uWSGI，使用 nginx 来处理静态文件请求，其余动态内容再转发给 uWSGI 交给 web 后台处理，网上这样的配置教程也是最多的。作为两款大名鼎鼎的服务器程序 nginx 负责静态文件，uWSGI 负责动态内容，各种在自己擅长的领域各施其职，的确效率很高，是高性能的 Python web 系统部署时的首选。不过有时用 Python 写了个小站点，性能需求并不高时。部署服务还要安装 nginx 和 uWSGI 两个服务器程序就显得有点麻烦了。能否把这些工作都交给一个服务器程序呢。",
        "title": "全能型 uWSGI 配置",
        "status": "Published",
        "urlname": "88579025-d6b7-43ae-98bb-12b52f90bcd9",
        "updated": "2023-07-13 14:14:00"
      },
      "url": "https://www.notion.so/uWSGI-88579025d6b743ae98bb12b52f90bcd9",
      "public_url": "https://military-albatross-7a9.notion.site/uWSGI-88579025d6b743ae98bb12b52f90bcd9"
    },
    {
      "object": "page",
      "id": "cc4cad06-98f6-48d5-bab8-3ecfb7fd8230",
      "created_time": "2023-07-13T06:06:00.000Z",
      "last_edited_time": "2023-07-13T06:09:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2019-03-17 00:00:00",
        "type": "Post",
        "category": "软件工具",
        "slug": "use-ci-system-to-free-time",
        "tags": [
          "CI",
          "Jenkins"
        ],
        "summary": "程序猿除了希望写好代码，一定也想着自己的项目可以如何快速的迭代上线，从而可以专注的完成代码的编写，减少繁杂的运维等工作。例如完成一项功能的开发后，推送到 Git 等代码管理系统后，剩下的测试、部署、上线等工作可以交给一个系统来自动化完成，这时便可以靠持续集成系统了。这里记录下我使用老牌的 Jenkins 持续集成系统来帮助自己完成的工作。",
        "title": "使用持续集成系统解放生产力",
        "status": "Published",
        "urlname": "cc4cad06-98f6-48d5-bab8-3ecfb7fd8230",
        "updated": "2023-07-13 14:09:00"
      },
      "url": "https://www.notion.so/cc4cad0698f648d5bab83ecfb7fd8230",
      "public_url": "https://military-albatross-7a9.notion.site/cc4cad0698f648d5bab83ecfb7fd8230"
    },
    {
      "object": "page",
      "id": "adf14ce3-4a96-4009-b132-1786ae179cc0",
      "created_time": "2023-07-11T10:50:00.000Z",
      "last_edited_time": "2023-07-11T10:51:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2019-09-09 00:00:00",
        "type": "Post",
        "category": "软件工具",
        "slug": "deploy-kubernetes-on-ubuntu18",
        "tags": [
          "kubernetes"
        ],
        "summary": "为了有个k8s的测试环境，使用了三台ubuntu18的系统搭建了一套k8s测试环境，主要参考了和我一步步部署 kubernetes 集群这个项目，这个项目对于如何一步步搭建起k8s集群环境已经很详细了，不过对于ubuntu 18.04的环境还是有一些小坑，这里记录一下。",
        "title": "在ubuntu18.04上部署kubernetes",
        "status": "Published",
        "urlname": "adf14ce3-4a96-4009-b132-1786ae179cc0",
        "updated": "2023-07-11 18:51:00"
      },
      "url": "https://www.notion.so/ubuntu18-04-kubernetes-adf14ce34a964009b1321786ae179cc0",
      "public_url": "https://military-albatross-7a9.notion.site/ubuntu18-04-kubernetes-adf14ce34a964009b1321786ae179cc0"
    },
    {
      "object": "page",
      "id": "c631f70a-8388-4ff0-bfb4-c3e41fc3ece0",
      "created_time": "2023-07-11T07:54:00.000Z",
      "last_edited_time": "2023-07-13T06:10:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-12-08 00:00:00",
        "type": "Post",
        "category": "软件工具",
        "slug": "sync-github-project-and-publish-on-coding",
        "tags": [
          "github",
          "coding",
          "devOps"
        ],
        "summary": "coding 提供了一套免费的静态页面服务，还可以自定义域名，本人的 airaNg 服务页面也是部署在coding的静态页面服务当中。不过 ariaNg 还会不断更新，如何在 ariaNg 原项目版本升级后自动更新自己部署的在 coding 的页面呢，这里利用 coding 自带的持续集成功能来完成这种自定义的操作。\n目前coding的静态页面服务已进行了修改，使用腾讯云的 oss 和 cdn 来部署了，虽然速度和稳定性有了提升，但可能也会产生费用。",
        "title": "使用coding自动同步和部署Github项目",
        "status": "Published",
        "urlname": "c631f70a-8388-4ff0-bfb4-c3e41fc3ece0",
        "updated": "2023-07-13 14:10:00"
      },
      "url": "https://www.notion.so/coding-Github-c631f70a83884ff0bfb4c3e41fc3ece0",
      "public_url": "https://military-albatross-7a9.notion.site/coding-Github-c631f70a83884ff0bfb4c3e41fc3ece0"
    },
    {
      "object": "page",
      "id": "854d17ad-00a6-4105-8292-ca67eea97d21",
      "created_time": "2023-07-11T07:46:00.000Z",
      "last_edited_time": "2023-07-14T02:21:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-09-13 00:00:00",
        "type": "Post",
        "category": "软件工具",
        "slug": "clang-header-file-not-fuound-under-mac",
        "tags": [
          "mac"
        ],
        "summary": "入手了一台 MacBook Air m2, 开始进入 MAC 的生态, 不过刚装好常用的开发环境, 在编译一个 golang 项目时就出现了一个找不到头文件的问题.",
        "title": "mac 系统找不到 clang 头文件",
        "status": "Published",
        "urlname": "854d17ad-00a6-4105-8292-ca67eea97d21",
        "updated": "2023-07-14 10:21:00"
      },
      "url": "https://www.notion.so/mac-clang-854d17ad00a641058292ca67eea97d21",
      "public_url": "https://military-albatross-7a9.notion.site/mac-clang-854d17ad00a641058292ca67eea97d21"
    },
    {
      "object": "page",
      "id": "c370350a-d366-45a1-b383-b5056de0e7b0",
      "created_time": "2023-07-10T09:50:00.000Z",
      "last_edited_time": "2023-07-18T17:11:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-07-11 00:00:00",
        "type": "Post",
        "category": "软件工具",
        "slug": "deploy-download-tool-aria2-pro",
        "tags": [
          "aria2"
        ],
        "summary": "几年前刚搭建了黑群晖时，在群晖的 docker 中跑了一个网友改造的 aria2 下载器，包含了一个已经配置好的 aria2 内核和一个 AriaNG 控制页面。之后应该是一次也没更新过，如今这个 aria2 下载器下载BT种子的话已经基本没有任何速度。AriaNG 页面也落后了很多个版本了。想着更新一下，因此发现了这个项目：Aria2-Pro-Docker 。",
        "title": "部署下载神器 Aria2 Pro",
        "status": "Published",
        "urlname": "c370350a-d366-45a1-b383-b5056de0e7b0",
        "updated": "2023-07-19 01:11:00"
      },
      "url": "https://www.notion.so/Aria2-Pro-c370350ad36645a1b383b5056de0e7b0",
      "public_url": "https://military-albatross-7a9.notion.site/Aria2-Pro-c370350ad36645a1b383b5056de0e7b0"
    },
    {
      "object": "page",
      "id": "e346dc18-cd99-4f15-8182-fc9ede484429",
      "created_time": "2023-07-04T08:26:00.000Z",
      "last_edited_time": "2023-07-05T11:02:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://static-1256611153.file.myqcloud.com/img/picgo/202304100031508.webp"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-09 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "one-week-essay-20230409",
        "tags": [
          "chatGPT",
          "MidJourney",
          "WakaTime"
        ],
        "summary": "有了小电驴后，这几周都有骑着出去兜兜风，发现了很多不知名的小角落，让自己对这座本以为很熟悉城市多了一些新鲜感。例如此图自于骑着电驴从公司回家的路程中，看到了路边的一座小游乐园，相比于单调的地铁，让这趟行程有趣了许多。",
        "title": "一周随笔20230409",
        "status": "Published",
        "cover": "https://static-1256611153.file.myqcloud.com/img/picgo/202304100031508.webp",
        "urlname": "e346dc18-cd99-4f15-8182-fc9ede484429",
        "updated": "2023-07-05 19:02:00"
      },
      "url": "https://www.notion.so/20230409-e346dc18cd994f158182fc9ede484429",
      "public_url": "https://military-albatross-7a9.notion.site/20230409-e346dc18cd994f158182fc9ede484429"
    },
    {
      "object": "page",
      "id": "46b9ecad-c2f6-4f79-bd50-b778ef0a0694",
      "created_time": "2023-07-04T08:26:00.000Z",
      "last_edited_time": "2023-08-11T10:05:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-23 00:00:00",
        "type": "Post",
        "category": "博客记录",
        "slug": "blog-decorate-record",
        "tags": [],
        "summary": "选定博客生成系统往往只是打造自己博客的第一步，这里记录了本博客从 hexo 迁移到 hugo 后，后续的功能集成步骤。",
        "title": "博客装修记",
        "status": "Published",
        "urlname": "46b9ecad-c2f6-4f79-bd50-b778ef0a0694",
        "updated": "2023-08-11 18:05:00"
      },
      "url": "https://www.notion.so/46b9ecadc2f64f79bd50b778ef0a0694",
      "public_url": "https://military-albatross-7a9.notion.site/46b9ecadc2f64f79bd50b778ef0a0694"
    },
    {
      "object": "page",
      "id": "8eb3eefd-7ff0-40ff-abfe-3e16320737ee",
      "created_time": "2023-07-04T08:26:00.000Z",
      "last_edited_time": "2023-07-10T09:12:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-03-26 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "one-week-essay-20230226",
        "tags": [],
        "summary": "理想的Blog系统",
        "title": "一周随笔20230226",
        "status": "Published",
        "urlname": "8eb3eefd-7ff0-40ff-abfe-3e16320737ee",
        "updated": "2023-07-10 17:12:00"
      },
      "url": "https://www.notion.so/20230226-8eb3eefd7ff040ffabfe3e16320737ee",
      "public_url": "https://military-albatross-7a9.notion.site/20230226-8eb3eefd7ff040ffabfe3e16320737ee"
    },
    {
      "object": "page",
      "id": "d8a704d7-d453-48c7-b249-a5e7ec0150b6",
      "created_time": "2023-07-04T08:26:00.000Z",
      "last_edited_time": "2023-08-27T18:11:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://static-1256611153.file.myqcloud.com/img/picgo/202305080014419.webp"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-05-22 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "life-stream-2305-w1",
        "tags": [
          "技术见闻",
          "效率提升"
        ],
        "summary": "五一没出去旅游，回了趟家乡，位于四川南门的小城攀枝花。去年通了高铁，相比于之前动辄12小时的普通火车，现在只需要4个多小时既能回家一趟了。非常喜欢这座位于亚热带的城市气候，目前月份已是天天晴朗的阳光，光亮亮的但不会闷热，相比于时长阴沉沉的成都，心情会好上不少，走在商业区，灯光跟人气都还不错，烟火气息很足，一种安心的回家感。",
        "title": "数字溪流2305-W1",
        "status": "Published",
        "cover": "https://static-1256611153.file.myqcloud.com/img/picgo/202305080014419.webp",
        "urlname": "d8a704d7-d453-48c7-b249-a5e7ec0150b6",
        "updated": "2023-08-28 02:11:00"
      },
      "url": "https://www.notion.so/2305-W1-d8a704d7d45348c7b249a5e7ec0150b6",
      "public_url": "https://military-albatross-7a9.notion.site/2305-W1-d8a704d7d45348c7b249a5e7ec0150b6"
    },
    {
      "object": "page",
      "id": "8a6872fc-1ca1-4f76-af70-f97d5c468b1e",
      "created_time": "2023-07-04T08:26:00.000Z",
      "last_edited_time": "2023-07-10T09:03:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://static-1256611153.file.myqcloud.com/img/picgo/202303191448519.jpeg"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-03-19 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "one-week-essay-20230319",
        "tags": [],
        "summary": "成功增驾摩托D照后，入手了人生第一台电摩，台铃赤兔。本来想买台铃的萌苏，不过家附近的店没有网上的款式，就看了这款。造型说不上多好看，胜在比较有特点吧，前后都有眼睛一样的双灯，两侧还有一排蓝灯，很有氛围，前轮的大碟刹也挺霸气，白色款还挺有兔子的感觉，车架也比较大，有赤兔马的气势。",
        "title": "一周随笔20230319",
        "status": "Published",
        "cover": "https://static-1256611153.file.myqcloud.com/img/picgo/202303191448519.jpeg",
        "urlname": "8a6872fc-1ca1-4f76-af70-f97d5c468b1e",
        "updated": "2023-07-10 17:03:00"
      },
      "url": "https://www.notion.so/20230319-8a6872fc1ca14f76af70f97d5c468b1e",
      "public_url": "https://military-albatross-7a9.notion.site/20230319-8a6872fc1ca14f76af70f97d5c468b1e"
    },
    {
      "object": "page",
      "id": "c99dd1d6-9b94-4bd6-8e34-ab5ba0aa894a",
      "created_time": "2023-07-04T08:26:00.000Z",
      "last_edited_time": "2023-08-11T10:05:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-08 00:00:00",
        "type": "Post",
        "category": "博客记录",
        "slug": "move-blog-to-hugo",
        "tags": [],
        "summary": "经过了一段时间的纠结，还是把博客从Hexo迁移到了Hugo",
        "title": "迁移博客至Hugo",
        "status": "Published",
        "urlname": "c99dd1d6-9b94-4bd6-8e34-ab5ba0aa894a",
        "updated": "2023-08-11 18:05:00"
      },
      "url": "https://www.notion.so/Hugo-c99dd1d69b944bd68e34ab5ba0aa894a",
      "public_url": "https://military-albatross-7a9.notion.site/Hugo-c99dd1d69b944bd68e34ab5ba0aa894a"
    },
    {
      "object": "page",
      "id": "0433ceef-587e-4f62-bdce-5c25138bea96",
      "created_time": "2023-07-04T08:26:00.000Z",
      "last_edited_time": "2023-07-10T09:05:00.000Z",
      "created_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "last_edited_by": {
        "object": "user",
        "id": "770a3cb9-0a43-4c92-9eff-fd44faf5a915"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://static-1256611153.file.myqcloud.com/img/picgo/202303131828393.webp"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "ae3c8c9f-d2e7-490c-b298-0f96e33fe57e"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-03-13 00:00:00",
        "type": "Post",
        "category": "数字溪流",
        "slug": "one-week-essay-20230313",
        "tags": [],
        "summary": "最近准备去增驾一个D照, 一个是闲着没事学点技能以后说不定也用得着(~~入职美团外卖部啥的~~), 另外夏天快要来了, 想入手一辆电摩去兜兜风. 按新国标来看, 电摩也属于摩托车需要通过驾照考试才能上路的.",
        "title": "一周随笔20230313",
        "status": "Published",
        "cover": "https://static-1256611153.file.myqcloud.com/img/picgo/202303131828393.webp",
        "urlname": "0433ceef-587e-4f62-bdce-5c25138bea96",
        "updated": "2023-07-10 17:05:00"
      },
      "url": "https://www.notion.so/20230313-0433ceef587e4f62bdce5c25138bea96",
      "public_url": "https://military-albatross-7a9.notion.site/20230313-0433ceef587e4f62bdce5c25138bea96"
    }
  ]
}